{
  "address": "0x813ff00350C3a82458E65c97C914a25f848466B9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "color",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "shape",
              "type": "uint8"
            }
          ],
          "internalType": "struct Defs.HeadInfo",
          "name": "headInfo",
          "type": "tuple"
        }
      ],
      "name": "getEmojiHead",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "defs",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x415ad67f4475d052f50ee1810031f4c4ff79090a10a89a240c811712a7e3ee66",
  "receipt": {
    "to": null,
    "from": "0x1cC6164C851945D7Ea266f90dc2C89117faD7379",
    "contractAddress": "0x813ff00350C3a82458E65c97C914a25f848466B9",
    "transactionIndex": 28,
    "gasUsed": "1987856",
    "logsBloom": "0x
    "blockHash": "0xf2628195d7472fdcbe133f3264c710dee7a36f685aae6c9e684ab4db36327201",
    "transactionHash": "0x415ad67f4475d052f50ee1810031f4c4ff79090a10a89a240c811712a7e3ee66",
    "logs": [],
    "blockNumber": 6593888,
    "cumulativeGasUsed": "9604271",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "415339df9fffd1da44caeac7c1e17ec4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"color\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"shape\",\"type\":\"uint8\"}],\"internalType\":\"struct Defs.HeadInfo\",\"name\":\"headInfo\",\"type\":\"tuple\"}],\"name\":\"getEmojiHead\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"defs\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SvgEmoji.sol\":\"SvgHead\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/DefineLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Defs {\\n\\tusing Strings for uint256;\\n\\n\\tstruct HeadInfo {\\n\\t\\tbytes color;\\n\\t\\tuint8 shape;\\n\\t}\\n\\n\\tstruct EyesInfo {\\n\\t\\tEyeInfo left;\\n\\t\\tEyeInfo right;\\n\\t}\\n\\n\\tstruct EyeInfo {\\n\\t\\tuint16 rx;\\n\\t\\tuint16 ry;\\n\\t\\tuint16 cx;\\n\\t\\tuint16 cy;\\n\\t}\\n\\n\\tstruct MouthInfo {\\n\\t\\tuint16 size;\\n\\t\\tuint16 width;\\n\\t\\tuint16 rotation;\\n\\t}\\n\\n\\tfunction headDescription(\\n\\t\\tHeadInfo memory head\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"color=#\\\",\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t\\\", shape=\\\",\\n\\t\\t\\tuint256(head.shape).toString()\\n\\t\\t);\\n\\t}\\n\\n\\tfunction eyeDescription(\\n\\t\\tEyeInfo memory eye\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"[\\\",\\n\\t\\t\\tuint256(eye.rx).toString(),\\n\\t\\t\\t\\\", \\\",\\n\\t\\t\\tuint256(eye.ry).toString(),\\n\\t\\t\\t\\\", \\\",\\n\\t\\t\\tuint256(eye.cx).toString(),\\n\\t\\t\\t\\\", \\\",\\n\\t\\t\\tuint256(eye.cy).toString(),\\n\\t\\t\\t\\\"]\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction eyesDescription(\\n\\t\\tEyesInfo memory eyes\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"left=\\\",\\n\\t\\t\\tstring(eyeDescription(eyes.left)),\\n\\t\\t\\t\\\", right=\\\",\\n\\t\\t\\tstring(eyeDescription(eyes.right))\\n\\t\\t);\\n\\t}\\n\\n\\tfunction mouthDescription(\\n\\t\\tMouthInfo memory mouth\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"size=\\\",\\n\\t\\t\\tuint256(mouth.size).toString(),\\n\\t\\t\\t\\\", width=\\\",\\n\\t\\t\\tuint256(mouth.width).toString(),\\n\\t\\t\\t\\\", rotation=\\\",\\n\\t\\t\\tuint256(mouth.rotation).toString()\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa055b1f5e5f5b3826f9f4693520b4ebf9726fdc22b7b6fa04085d0068782aab8\",\"license\":\"MIT\"},\"contracts/HexColor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary HexColor {\\n\\tfunction getGradientColor(\\n\\t\\tstring memory hexColor,\\n\\t\\tint amt\\n\\t) internal pure returns (string memory) {\\n\\t\\tint num = int(parseHexToUint(hexColor));\\n\\t\\tuint r = check((num >> 16) + amt);\\n\\t\\tuint b = check(((num >> 8) & 0x00ff) + amt);\\n\\t\\tuint g = check((num & 0x0000ff) + amt);\\n\\t\\tuint rgb = (g | (b << 8) | (r << 16));\\n\\t\\tstring memory result = Strings.toHexString(rgb, 3);\\n\\t\\treturn substring(result, 2, -1);\\n\\t}\\n\\n\\tfunction parseHexToUint(\\n\\t\\tstring memory hexColor\\n\\t) internal pure returns (uint) {\\n\\t\\tbytes memory hexBytes = bytes(hexColor);\\n\\t\\trequire(hexBytes.length == 6, \\\"Invalid hex color string length\\\");\\n\\n\\t\\tuint result = 0;\\n\\t\\tfor (uint256 i = 0; i < hexBytes.length; i++) {\\n\\t\\t\\tresult *= 16;\\n\\t\\t\\tresult += hexCharToUint(uint8(hexBytes[i]));\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction hexCharToUint(uint8 b) internal pure returns (uint) {\\n\\t\\tif (b >= 48 && b <= 57) {\\n\\t\\t\\treturn b - 48; // '0' - '9'\\n\\t\\t} else if (b >= 97 && b <= 102) {\\n\\t\\t\\treturn b - 87; // 'a' - 'f', 'a' = 10\\n\\t\\t} else if (b >= 65 && b <= 70) {\\n\\t\\t\\treturn b - 55; // 'A' - 'F', 'A' = 10\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Invalid hex character\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction check(int x) internal pure returns (uint) {\\n\\t\\tif (x > 255) {\\n\\t\\t\\treturn 255;\\n\\t\\t} else if (x < 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn uint(x);\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tint startIndex,\\n\\t\\tint endIndex\\n\\t) public pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tuint start = 0;\\n\\t\\tuint end = strBytes.length;\\n\\t\\tif (startIndex >= 0) {\\n\\t\\t\\tstart = uint(startIndex);\\n\\t\\t}\\n\\t\\tif (endIndex >= 0) {\\n\\t\\t\\tend = uint(endIndex);\\n\\t\\t}\\n\\t\\trequire(start < end, \\\"Invalid indices\\\");\\n\\t\\trequire(end <= strBytes.length, \\\"End index out of bounds\\\");\\n\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = strBytes[i];\\n\\t\\t}\\n\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\",\"keccak256\":\"0xab57949db97b4d89bf79e1b1ed42f69e002486aff55e0d975a46511f79e9ba0f\",\"license\":\"MIT\"},\"contracts/SvgEmoji.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nimport \\\"./HexColor.sol\\\";\\nimport \\\"./DefineLib.sol\\\";\\n\\nlibrary SvgEmoji {\\n\\tusing Strings for uint256;\\n\\n\\tfunction tokenURI(\\n        uint256 id,\\n        address owner,\\n\\t\\tDefs.HeadInfo memory head,\\n\\t\\tDefs.EyesInfo memory eyes,\\n\\t\\tDefs.MouthInfo memory mouth\\n\\t) public pure returns (string memory) {\\n        bytes memory name = abi.encodePacked(\\\"Emoji #\\\", id.toString());\\n\\t\\tbytes memory description = abi.encodePacked(\\n\\t\\t\\t\\\"Emoji: \\\",\\n\\t\\t\\tstring(Defs.headDescription(head)),\\n\\t\\t\\t\\\", Eyes: \\\",\\n\\t\\t\\tstring(Defs.eyesDescription(eyes)),\\n\\t\\t\\t\\\", Mouth: \\\",\\n\\t\\t\\tstring(Defs.mouthDescription(mouth))\\n\\t\\t);\\n\\t\\tstring memory image = Base64.encode(\\n\\t\\t\\trenderSvgImage(head, eyes, mouth)\\n\\t\\t);\\n\\t\\tbytes memory json = abi.encodePacked(\\n\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\tstring(name),\\n\\t\\t\\t'\\\", \\\"description\\\":\\\"',\\n\\t\\t\\tstring(description),\\n\\t\\t\\t'\\\", \\\"external_url\\\":\\\"',\\n\\t\\t\\t'\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"emoji\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tstring(Defs.headDescription(head)),\\n\\t\\t\\t'\\\"},{\\\"trait_type\\\": \\\"eyes\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tstring(Defs.eyesDescription(eyes)),\\n\\t\\t\\t'\\\"},{\\\"trait_type\\\": \\\"mouth\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tstring(Defs.mouthDescription(mouth)),\\n\\t\\t\\t'\\\"}], \\\"owner\\\":\\\"',\\n\\t\\t\\tuint256(uint160(owner)).toHexString(20),\\n\\t\\t\\t'\\\", \\\"image\\\": \\\"',\\n\\t\\t\\t\\\"data:image/svg+xml;base64,\\\",\\n\\t\\t\\timage,\\n\\t\\t\\t'\\\"}'\\n\\t\\t);\\n\\t\\tbytes memory base64 = abi.encodePacked(\\n\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\tBase64.encode(json)\\n\\t\\t);\\n\\t\\treturn string(base64);\\n    }\\n\\n\\tfunction tempTokenURI(\\n        uint256 id,\\n        address owner\\n\\t) public pure returns (string memory) {\\n\\t\\tbytes memory name = abi.encodePacked(\\\"Emoji #\\\", id.toString());\\n\\t\\tbytes memory image = abi.encodePacked(\\n\\t\\t\\t'<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 800 800\\\">',\\n\\t\\t\\t'<text x=\\\"100\\\" y=\\\"350\\\" font-family=\\\"inherit\\\" font-size=\\\"80\\\">Emoji is minting...</text></svg>'\\n\\t\\t);\\n\\t\\tbytes memory json = abi.encodePacked(\\n\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\tstring(name),\\n\\t\\t\\t'\\\", \\\"description\\\":\\\"\\\", \\\"external_url\\\":\\\"\\\", \\\"attributes\\\": [], \\\"owner\\\":\\\"',\\n\\t\\t\\tuint256(uint160(owner)).toHexString(20),\\n\\t\\t\\t'\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n\\t\\t\\tBase64.encode(image),\\n\\t\\t\\t'\\\"}'\\n\\t\\t);\\n\\t\\tbytes memory base64 = abi.encodePacked(\\n\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\tBase64.encode(json)\\n\\t\\t);\\n\\t\\treturn string(base64);\\n\\t}\\n\\n\\tfunction renderSvgImage(\\n\\t\\tDefs.HeadInfo memory head,\\n\\t\\tDefs.EyesInfo memory eyes,\\n\\t\\tDefs.MouthInfo memory mouth\\n\\t) public pure returns (bytes memory image) {\\n\\t\\t(bytes memory headDefs, bytes memory headData) = SvgHead.getEmojiHead(head);\\n\\t\\t(bytes memory eyesDefs, bytes memory eyesData) = SvgEyes.getEmojiEyes(eyes);\\n\\t\\t(bytes memory mouthDefs, bytes memory mouthData) = SvgMouth.getEmojiMouth(mouth);\\n\\t\\timage = abi.encodePacked(\\n\\t\\t\\t'<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 800 800\\\"><defs>',\\n\\t\\t\\tstring(headDefs),\\n\\t\\t\\tstring(eyesDefs),\\n\\t\\t\\tstring(mouthDefs),\\n\\t\\t\\t'</defs><g stroke-linecap=\\\"round\\\">',\\n\\t\\t\\tstring(headData),\\n\\t\\t\\tstring(eyesData),\\n\\t\\t\\tstring(mouthData),\\n\\t\\t\\t\\\"</g></svg>\\\"\\n\\t\\t);\\n\\t}\\n}\\n\\nlibrary SvgHead {\\n\\tfunction getEmojiHead(\\n\\t\\tDefs.HeadInfo memory headInfo\\n\\t) external pure returns (bytes memory defs, bytes memory data) {\\n\\t\\t// HeadInfo memory headInfo = HeadInfo(\\\"ffe499\\\", 0);\\t// debug\\n\\t\\tstring memory baseColor = string(headInfo.color);\\n\\t\\tstring memory stopColor1 = HexColor.getGradientColor(baseColor, -54);\\n\\t\\tstring memory stopColor2 = HexColor.getGradientColor(baseColor, 50);\\n\\t\\tdefs = abi.encodePacked(\\n\\t\\t\\t'<radialGradient id=\\\"svgemoji-grad-dark\\\" r=\\\"93%\\\" cx=\\\"20%\\\" cy=\\\"20%\\\"><stop offset=\\\"70%\\\" stop-color=\\\"#',\\n\\t\\t\\tbaseColor,\\n\\t\\t\\t'\\\" stop-opacity=\\\"0\\\"></stop><stop offset=\\\"97%\\\" stop-color=\\\"#',\\n\\t\\t\\tstopColor1,\\n\\t\\t\\t'\\\" stop-opacity=\\\"1\\\"></stop></radialGradient><radialGradient id=\\\"svgemoji-grad-light\\\" r=\\\"65%\\\" cx=\\\"28%\\\" cy=\\\"20%\\\"><stop offset=\\\"0%\\\" stop-color=\\\"#',\\n\\t\\t\\tstopColor2,\\n\\t\\t\\t'\\\" stop-opacity=\\\"0.75\\\"></stop><stop offset=\\\"100%\\\" stop-color=\\\"#',\\n\\t\\t\\tbaseColor,\\n\\t\\t\\t'\\\" stop-opacity=\\\"0\\\"></stop></radialGradient><filter id=\\\"svgemoji-blur\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" ',\\n\\t\\t\\t'color-interpolation-filters=\\\"sRGB\\\"><feGaussianBlur stdDeviation=\\\"30\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" ',\\n\\t\\t\\t'in=\\\"SourceGraphic\\\" edgeMode=\\\"none\\\" result=\\\"blur\\\"></feGaussianBlur></filter><filter id=\\\"inner-blur\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" ',\\n\\t\\t\\t'filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\">',\\n\\t\\t\\t'<feGaussianBlur stdDeviation=\\\"2\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" in=\\\"SourceGraphic\\\" edgeMode=\\\"none\\\" result=\\\"blur\\\"></feGaussianBlur></filter>'\\n\\t\\t);\\n\\n\\t\\tif (headInfo.shape == 0) {\\n\\t\\t\\tdata = getCircleHeadData(headInfo);\\n\\t\\t} else {\\n\\t\\t\\tdata = getIrregularHeadData(headInfo);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getCircleHeadData(\\n\\t\\tDefs.HeadInfo memory head\\n\\t) private pure returns (bytes memory data) {\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\" opacity=\\\"0.25\\\" filter=\\\"url(#svgemoji-blur)\\\" transform=\\\"translate(-10, 60)\\\"></circle>',\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\"></circle>',\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"url(#svgemoji-grad-dark)\\\"></circle>',\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"url(#svgemoji-grad-light)\\\"></circle>'\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getIrregularHeadData(\\n\\t\\tDefs.HeadInfo memory head\\n\\t) private pure returns (bytes memory data) {\\n\\t\\tstring[4] memory heads = [\\n\\t\\t\\t\\\"M650 399.99999613096236C650 561.6737853047515 561.6737891737891 635.7549818859482 400 635.7549818859482C238.3269230769231 635.7549818859482 150 561.6737853047515 150 399.99999613096236C150 238.3269192078854 238.3269230769231 164.24501037597656 400 164.24501037597656C561.6737891737891 164.24501037597656 650 238.3269192078854 650 399.99999613096236Z \\\",\\n\\t\\t\\t\\\"M650 399.9999886102486C650 561.6737777840377 561.6737891737891 664.2450028552628 400 664.2450028552628C238.3269230769231 664.2450028552628 150 561.6737777840377 150 399.9999886102486C150 238.32691168717167 238.3269230769231 135.75497436523438 400 135.75497436523438C561.6737891737891 135.75497436523438 650 238.32691168717167 650 399.9999886102486Z \\\",\\n\\t\\t\\t\\\"M650 399.99998478233977C650 552.9582058065985 552.9582210242588 676.9541626799139 400 676.9541626799139C247.04245283018867 676.9541626799139 150 552.9582058065985 150 399.99998478233977C150 247.04243761252843 247.04245283018867 123.04580688476562 400 123.04580688476562C552.9582210242588 123.04580688476562 650 247.04243761252843 650 399.99998478233977Z \\\",\\n\\t\\t\\t\\\"M650 399.99999613096236C650 561.6737853047515 561.6737891737891 635.7549818859482 400 635.7549818859482C238.3269230769231 635.7549818859482 150 561.6737853047515 150 399.99999613096236C150 238.3269192078854 238.3269230769231 164.24501037597656 400 164.24501037597656C561.6737891737891 164.24501037597656 650 238.3269192078854 650 399.99999613096236Z \\\"\\n\\t\\t];\\n\\t\\tstring memory headShape = heads[head.shape - 1];\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\t'<path d=\\\"M650 449.99998478233977C650 602.9582058065985 552.9582210242588 726.9541626799139 400 726.9541626799139C247.04245283018867 726.9541626799139 150 602.9582058065985 150 449.99998478233977C150 297.04243761252843 247.04245283018867 173.04580688476562 400 173.04580688476562C552.9582210242588 173.04580688476562 650 297.04243761252843 650 449.99998478233977Z \\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\" opacity=\\\"0.25\\\" filter=\\\"url(#svgemoji-blur)\\\"></path><path d=\\\"',\\n\\t\\t\\tstring(headShape),\\n\\t\\t\\t'\\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\"></path><path d=\\\"',\\n\\t\\t\\tstring(headShape),\\n\\t\\t\\t'\\\" fill=\\\"url(#svgemoji-grad-dark)\\\"></path><path d=\\\"',\\n\\t\\t\\tstring(headShape),\\n\\t\\t\\t'\\\" fill=\\\"url(#svgemoji-grad-light)\\\"></path>'\\n\\t\\t);\\n\\t}\\n}\\n\\nlibrary SvgEyes {\\n\\tusing Strings for uint256;\\n\\n\\tfunction getEmojiEyes(\\n\\t\\tDefs.EyesInfo memory eyes\\n\\t) external pure returns (bytes memory defs, bytes memory data) {\\n\\t\\tdefs = abi.encodePacked(\\n\\t\\t\\t'<filter id=\\\"eye-shadow\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" ',\\n\\t\\t\\t'filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" ',\\n\\t\\t\\t'color-interpolation-filters=\\\"sRGB\\\">',\\n\\t\\t\\t'<feDropShadow stdDeviation=\\\"10\\\" dx=\\\"10\\\" dy=\\\"10\\\" flood-color=\\\"#000000\\\" flood-opacity=\\\"0.3\\\" ',\\n\\t\\t\\t'x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" result=\\\"dropShadow\\\"></feDropShadow></filter>',\\n\\t\\t\\t'<linearGradient id=\\\"eye-light\\\" gradientTransform=\\\"rotate(-25)\\\" x1=\\\"50%\\\" y1=\\\"0%\\\" x2=\\\"50%\\\" y2=\\\"100%\\\">',\\n\\t\\t\\t'<stop offset=\\\"20%\\\" stop-color=\\\"#323232\\\" stop-opacity=\\\"1\\\"></stop>',\\n\\t\\t\\t'<stop offset=\\\"100%\\\" stop-color=\\\"#000000\\\" stop-opacity=\\\"0\\\"></stop></linearGradient>'\\n\\t\\t);\\n\\t\\tbytes memory leftTemp = abi.encodePacked(\\n\\t\\t\\t'rx=\\\"',\\n\\t\\t\\tuint256(eyes.left.rx).toString(),\\n\\t\\t\\t'\\\" ry=\\\"',\\n\\t\\t\\tuint256(eyes.left.ry).toString(),\\n\\t\\t\\t'\\\" cx=\\\"',\\n\\t\\t\\tuint256(eyes.left.cx).toString(),\\n\\t\\t\\t'\\\" cy=\\\"',\\n\\t\\t\\tuint256(eyes.left.cy).toString()\\n\\t\\t);\\n\\t\\tbytes memory rightTemp = abi.encodePacked(\\n\\t\\t\\t'rx=\\\"',\\n\\t\\t\\tuint256(eyes.right.rx).toString(),\\n\\t\\t\\t'\\\" ry=\\\"',\\n\\t\\t\\tuint256(eyes.right.ry).toString(),\\n\\t\\t\\t'\\\" cx=\\\"',\\n\\t\\t\\tuint256(eyes.right.cx).toString(),\\n\\t\\t\\t'\\\" cy=\\\"',\\n\\t\\t\\tuint256(eyes.right.cy).toString()\\n\\t\\t);\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\t\\\"<g><ellipse \\\",\\n\\t\\t\\tstring(leftTemp),\\n\\t\\t\\t'\\\" fill=\\\"#000000\\\" filter=\\\"url(#eye-shadow)\\\"></ellipse><ellipse ',\\n\\t\\t\\tstring(leftTemp),\\n\\t\\t\\t'\\\" fill=\\\"url(#eye-light)\\\" filter=\\\"url(#inner-blur)\\\"></ellipse></g>',\\n\\t\\t\\t\\\"<g><ellipse \\\",\\n\\t\\t\\tstring(rightTemp),\\n\\t\\t\\t'\\\" fill=\\\"#000000\\\" filter=\\\"url(#eye-shadow)\\\"></ellipse><ellipse ',\\n\\t\\t\\tstring(rightTemp),\\n\\t\\t\\t'\\\" fill=\\\"url(#eye-light)\\\" filter=\\\"url(#inner-blur)\\\"></ellipse></g>'\\n\\t\\t);\\n\\t}\\n}\\n\\nlibrary SvgMouth {\\n\\tusing Strings for uint256;\\n\\n\\tfunction getEmojiMouth(\\n\\t\\tDefs.MouthInfo memory mouth\\n\\t) external pure returns (bytes memory defs, bytes memory data) {\\n\\t\\tdefs = abi.encodePacked(\\n\\t\\t\\t'<linearGradient id=\\\"mouth-light\\\" x1=\\\"50%\\\" y1=\\\"0%\\\" x2=\\\"50%\\\" y2=\\\"100%\\\">',\\n\\t\\t\\t'<stop offset=\\\"0%\\\" stop-color=\\\"#ff9667\\\" stop-opacity=\\\"1\\\"></stop>',\\n\\t\\t\\t'<stop offset=\\\"100%\\\" stop-color=\\\"#ff1205\\\" stop-opacity=\\\"0\\\"></stop></linearGradient>',\\n\\t\\t\\t'<filter id=\\\"mouth-shadow\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" ',\\n\\t\\t\\t'filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" ',\\n\\t\\t\\t'color-interpolation-filters=\\\"sRGB\\\">',\\n\\t\\t\\t'<feDropShadow stdDeviation=\\\"10\\\" dx=\\\"10\\\" dy=\\\"10\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" ',\\n\\t\\t\\t'result=\\\"dropShadow\\\" flood-color=\\\"#c20000\\\" flood-opacity=\\\"0.9\\\"></feDropShadow></filter>'\\n\\t\\t);\\n\\t\\tuint16 s = 350 - mouth.size;\\n\\t\\tuint16 c = 400 - mouth.size;\\n\\t\\tuint16 e = 450 + mouth.size;\\n\\t\\tbytes memory temp = abi.encodePacked(\\n\\t\\t\\t'<path d=\\\"M',\\n\\t\\t\\tuint256(s).toString(),\\n\\t\\t\\t\\\" 512.5Q\\\",\\n\\t\\t\\tuint256(c).toString(),\\n\\t\\t\\t\\\" 562.5 \\\",\\n\\t\\t\\tuint256(e).toString(),\\n\\t\\t\\t' 512.5\\\" transform=\\\"rotate(',\\n\\t\\t\\tuint256(mouth.rotation).toString(),\\n\\t\\t\\t', 400, 400)\\\"'\\n\\t\\t);\\n\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\tstring(temp),\\n\\t\\t\\t' stroke-width=\\\"',\\n\\t\\t\\tuint256(mouth.width).toString(),\\n\\t\\t\\t'\\\" stroke=\\\"#ff1205\\\"',\\n\\t\\t\\t' fill=\\\"none\\\" filter=\\\"url(#mouth-shadow)\\\"></path>',\\n\\t\\t\\tstring(temp),\\n\\t\\t\\t' stroke-width=\\\"6\\\" stroke=\\\"url(#mouth-light)\\\" fill=\\\"none\\\"'\\n\\t\\t\\t' filter=\\\"url(#inner-blur)\\\"></path>'\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe0fa0d4fb5cc0f7a1344be6b23eb50a426e854a03147e41910c9dad89126573e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80630817c5ed1461003a575b600080fd5b610054600480360381019061004f9190610ab5565b61006b565b604051610062929190610b7d565b60405180910390f35b60608060008360000151905060006100a3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffca61010f565b905060006100b283603261010f565b9050828282856040516020016100cb94939291906112cf565b60405160208183030381529060405294506000866020015160ff16036100fb576100f4866101ce565b9350610107565b61010486610201565b93505b505050915091565b6060600061011c846102fc565b9050600061013884601084901d61013391906113a9565b6103b6565b905060006101578560ff600886901d1661015291906113a9565b6103b6565b905060006101728660ff861661016d91906113a9565b6103b6565b90506000601084901b600884901b831717905060006101928260036103e5565b90506101c08160027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61062b565b965050505050505092915050565b6060816000015182600001516040516020016101eb929190611673565b6040516020818303038152906040529050919050565b60606000604051806080016040528060405180610180016040528061015e8152602001611ecb61015e9139815260200160405180610180016040528061015d815260200161202961015d91398152602001604051806101a0016040528061016281526020016121866101629139815260200160405180610180016040528061015e8152602001611ecb61015e91398152509050600081600185602001516102a891906116d9565b60ff16600481106102bc576102bb61170e565b5b60200201519050836000015181856000015183846040516020016102e4959493929190611b1f565b60405160208183030381529060405292505050919050565b6000808290506006815114610346576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033d90611c09565b60405180910390fd5b6000805b82518110156103ab576010826103609190611c33565b915061038b8382815181106103785761037761170e565b5b602001015160f81c60f81b60f81c6107ce565b826103969190611c75565b915080806103a390611ca9565b91505061034a565b508092505050919050565b600060ff8213156103ca5760ff90506103e0565b60008212156103dc57600090506103e0565b8190505b919050565b60606000839050600060028460026103fd9190611c33565b6104079190611c75565b67ffffffffffffffff8111156104205761041f6108d6565b5b6040519080825280601f01601f1916602001820160405280156104525781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061048a5761048961170e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106104ee576104ed61170e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000600185600261052e9190611c33565b6105389190611c75565b90505b60018111156105d8577f3031323334353637383961626364656600000000000000000000000000000000600f84166010811061057a5761057961170e565b5b1a60f81b8282815181106105915761059061170e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600483901c9250806105d190611cf1565b905061053b565b50600082146106205784846040517fe22e27eb000000000000000000000000000000000000000000000000000000008152600401610617929190611d29565b60405180910390fd5b809250505092915050565b606060008490506000808251905060008612610645578591505b60008512610651578490505b808210610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a90611d9e565b60405180910390fd5b82518111156106d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ce90611e0a565b60405180910390fd5b600082826106e59190611e2a565b67ffffffffffffffff8111156106fe576106fd6108d6565b5b6040519080825280601f01601f1916602001820160405280156107305781602001600182028036833780820191505090505b50905060008390505b828110156107bf578481815181106107545761075361170e565b5b602001015160f81c60f81b82858361076c9190611e2a565b8151811061077d5761077c61170e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806107b790611ca9565b915050610739565b50809450505050509392505050565b600060308260ff16101580156107e8575060398260ff1611155b15610804576030826107fa91906116d9565b60ff1690506108a7565b60618260ff161015801561081c575060668260ff1611155b156108385760578261082e91906116d9565b60ff1690506108a7565b60418260ff1610158015610850575060468260ff1611155b1561086c5760378261086291906116d9565b60ff1690506108a7565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089e90611eaa565b60405180910390fd5b919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61090e826108c5565b810181811067ffffffffffffffff8211171561092d5761092c6108d6565b5b80604052505050565b60006109406108ac565b905061094c8282610905565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561097b5761097a6108d6565b5b610984826108c5565b9050602081019050919050565b82818337600083830152505050565b60006109b36109ae84610960565b610936565b9050828152602081018484840111156109cf576109ce61095b565b5b6109da848285610991565b509392505050565b600082601f8301126109f7576109f6610956565b5b8135610a078482602086016109a0565b91505092915050565b600060ff82169050919050565b610a2681610a10565b8114610a3157600080fd5b50565b600081359050610a4381610a1d565b92915050565b600060408284031215610a5f57610a5e6108c0565b5b610a696040610936565b9050600082013567ffffffffffffffff811115610a8957610a88610951565b5b610a95848285016109e2565b6000830152506020610aa984828501610a34565b60208301525092915050565b600060208284031215610acb57610aca6108b6565b5b600082013567ffffffffffffffff811115610ae957610ae86108bb565b5b610af584828501610a49565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b38578082015181840152602081019050610b1d565b60008484015250505050565b6000610b4f82610afe565b610b598185610b09565b9350610b69818560208601610b1a565b610b72816108c5565b840191505092915050565b60006040820190508181036000830152610b978185610b44565b90508181036020830152610bab8184610b44565b90509392505050565b600081905092915050565b7f3c72616469616c4772616469656e742069643d22737667656d6f6a692d67726160008201527f642d6461726b2220723d22393325222063783d22323025222063793d2232302560208201527f223e3c73746f70206f66667365743d22373025222073746f702d636f6c6f723d60408201527f2223000000000000000000000000000000000000000000000000000000000000606082015250565b6000610c67606283610bb4565b9150610c7282610bbf565b606282019050919050565b600081519050919050565b6000610c9382610c7d565b610c9d8185610bb4565b9350610cad818560208601610b1a565b80840191505092915050565b7f222073746f702d6f7061636974793d2230223e3c2f73746f703e3c73746f702060008201527f6f66667365743d22393725222073746f702d636f6c6f723d2223000000000000602082015250565b6000610d15603a83610bb4565b9150610d2082610cb9565b603a82019050919050565b7f222073746f702d6f7061636974793d2231223e3c2f73746f703e3c2f7261646960008201527f616c4772616469656e743e3c72616469616c4772616469656e742069643d227360208201527f7667656d6f6a692d677261642d6c696768742220723d22363525222063783d2260408201527f323825222063793d22323025223e3c73746f70206f66667365743d223025222060608201527f73746f702d636f6c6f723d222300000000000000000000000000000000000000608082015250565b6000610df9608d83610bb4565b9150610e0482610d2b565b608d82019050919050565b7f222073746f702d6f7061636974793d22302e3735223e3c2f73746f703e3c737460008201527f6f70206f66667365743d2231303025222073746f702d636f6c6f723d22230000602082015250565b6000610e6b603e83610bb4565b9150610e7682610e0f565b603e82019050919050565b7f222073746f702d6f7061636974793d2230223e3c2f73746f703e3c2f7261646960008201527f616c4772616469656e743e3c66696c7465722069643d22737667656d6f6a692d60208201527f626c75722220783d222d313030252220793d222d31303025222077696474683d60408201527f223430302522206865696768743d2234303025222066696c746572556e69747360608201527f3d226f626a656374426f756e64696e67426f7822207072696d6974697665556e60808201527f6974733d227573657253706163654f6e5573652220000000000000000000000060a082015250565b6000610f7560b583610bb4565b9150610f8082610e81565b60b582019050919050565b7f636f6c6f722d696e746572706f6c6174696f6e2d66696c746572733d2273524760008201527f42223e3c6665476175737369616e426c757220737464446576696174696f6e3d60208201527f2233302220783d2230252220793d223025222077696474683d2231303025222060408201527f6865696768743d22313030252220000000000000000000000000000000000000606082015250565b6000611033606e83610bb4565b915061103e82610f8b565b606e82019050919050565b7f696e3d22536f75726365477261706869632220656467654d6f64653d226e6f6e60008201527f652220726573756c743d22626c7572223e3c2f6665476175737369616e426c7560208201527f723e3c2f66696c7465723e3c66696c7465722069643d22696e6e65722d626c7560408201527f722220783d222d313030252220793d222d31303025222077696474683d22343060608201527f302522206865696768743d223430302522200000000000000000000000000000608082015250565b6000611117609283610bb4565b915061112282611049565b609282019050919050565b7f66696c746572556e6974733d226f626a656374426f756e64696e67426f78222060008201527f7072696d6974697665556e6974733d227573657253706163654f6e557365222060208201527f636f6c6f722d696e746572706f6c6174696f6e2d66696c746572733d2273524760408201527f42223e0000000000000000000000000000000000000000000000000000000000606082015250565b60006111d5606383610bb4565b91506111e08261112d565b606382019050919050565b7f3c6665476175737369616e426c757220737464446576696174696f6e3d22322260008201527f20783d2230252220793d223025222077696474683d223130302522206865696760208201527f68743d22313030252220696e3d22536f7572636547726170686963222065646760408201527f654d6f64653d226e6f6e652220726573756c743d22626c7572223e3c2f66654760608201527f6175737369616e426c75723e3c2f66696c7465723e0000000000000000000000608082015250565b60006112b9609583610bb4565b91506112c4826111eb565b609582019050919050565b60006112da82610c5a565b91506112e68287610c88565b91506112f182610d08565b91506112fd8286610c88565b915061130882610dec565b91506113148285610c88565b915061131f82610e5e565b915061132b8284610c88565b915061133682610f68565b915061134182611026565b915061134c8261110a565b9150611357826111c8565b9150611362826112ac565b915081905095945050505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113b482611370565b91506113bf83611370565b9250828201905082811215600083121683821260008412151617156113e7576113e661137a565b5b92915050565b7f3c636972636c6520723d22323530222063783d22343030222063793d2234303060008201527f222066696c6c3d22230000000000000000000000000000000000000000000000602082015250565b6000611449602983610bb4565b9150611454826113ed565b602982019050919050565b7f22206f7061636974793d22302e3235222066696c7465723d2275726c2823737660008201527f67656d6f6a692d626c75722922207472616e73666f726d3d227472616e736c6160208201527f7465282d31302c20363029223e3c2f636972636c653e00000000000000000000604082015250565b60006114e1605683610bb4565b91506114ec8261145f565b605682019050919050565b7f223e3c2f636972636c653e000000000000000000000000000000000000000000600082015250565b600061152d600b83610bb4565b9150611538826114f7565b600b82019050919050565b7f3c636972636c6520723d22323530222063783d22343030222063793d2234303060008201527f222066696c6c3d2275726c2823737667656d6f6a692d677261642d6461726b2960208201527f223e3c2f636972636c653e000000000000000000000000000000000000000000604082015250565b60006115c5604b83610bb4565b91506115d082611543565b604b82019050919050565b7f3c636972636c6520723d22323530222063783d22343030222063793d2234303060008201527f222066696c6c3d2275726c2823737667656d6f6a692d677261642d6c6967687460208201527f29223e3c2f636972636c653e0000000000000000000000000000000000000000604082015250565b600061165d604c83610bb4565b9150611668826115db565b604c82019050919050565b600061167e8261143c565b915061168a8285610c88565b9150611695826114d4565b91506116a08261143c565b91506116ac8284610c88565b91506116b782611520565b91506116c2826115b8565b91506116cd82611650565b91508190509392505050565b60006116e482610a10565b91506116ef83610a10565b9250828203905060ff8111156117085761170761137a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f3c7061746820643d224d363530203434392e393939393834373832333339373760008201527f43363530203630322e39353832303538303635393835203535322e393538323260208201527f3130323432353838203732362e3935343136323637393931333920343030203760408201527f32362e39353431363236373939313339433234372e303432343532383330313860608201527f383637203732362e3935343136323637393931333920313530203630322e393560808201527f383230353830363539383520313530203434392e39393939383437383233333960a08201527f373743313530203239372e3034323433373631323532383433203234372e303460c08201527f323435323833303138383637203137332e30343538303638383437363536322060e08201527f343030203137332e3034353830363838343736353632433535322e39353832326101008201527f3130323432353838203137332e303435383036383834373635363220363530206101208201527f3239372e303432343337363132353238343320363530203434392e39393939386101408201527f3437383233333937375a20222066696c6c3d222300000000000000000000000061016082015250565b600061191a61017483610bb4565b91506119258261173d565b61017482019050919050565b7f22206f7061636974793d22302e3235222066696c7465723d2275726c2823737660008201527f67656d6f6a692d626c757229223e3c2f706174683e3c7061746820643d220000602082015250565b600061198d603e83610bb4565b915061199882611931565b603e82019050919050565b7f222066696c6c3d22230000000000000000000000000000000000000000000000600082015250565b60006119d9600983610bb4565b91506119e4826119a3565b600982019050919050565b7f223e3c2f706174683e3c7061746820643d220000000000000000000000000000600082015250565b6000611a25601283610bb4565b9150611a30826119ef565b601282019050919050565b7f222066696c6c3d2275726c2823737667656d6f6a692d677261642d6461726b2960008201527f223e3c2f706174683e3c7061746820643d220000000000000000000000000000602082015250565b6000611a97603283610bb4565b9150611aa282611a3b565b603282019050919050565b7f222066696c6c3d2275726c2823737667656d6f6a692d677261642d6c6967687460008201527f29223e3c2f706174683e00000000000000000000000000000000000000000000602082015250565b6000611b09602a83610bb4565b9150611b1482611aad565b602a82019050919050565b6000611b2a8261190c565b9150611b368288610c88565b9150611b4182611980565b9150611b4d8287610c88565b9150611b58826119cc565b9150611b648286610c88565b9150611b6f82611a18565b9150611b7b8285610c88565b9150611b8682611a8a565b9150611b928284610c88565b9150611b9d82611afc565b91508190509695505050505050565b600082825260208201905092915050565b7f496e76616c69642068657820636f6c6f7220737472696e67206c656e67746800600082015250565b6000611bf3601f83611bac565b9150611bfe82611bbd565b602082019050919050565b60006020820190508181036000830152611c2281611be6565b9050919050565b6000819050919050565b6000611c3e82611c29565b9150611c4983611c29565b9250828202611c5781611c29565b91508282048414831517611c6e57611c6d61137a565b5b5092915050565b6000611c8082611c29565b9150611c8b83611c29565b9250828201905080821115611ca357611ca261137a565b5b92915050565b6000611cb482611c29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ce657611ce561137a565b5b600182019050919050565b6000611cfc82611c29565b915060008203611d0f57611d0e61137a565b5b600182039050919050565b611d2381611c29565b82525050565b6000604082019050611d3e6000830185611d1a565b611d4b6020830184611d1a565b9392505050565b7f496e76616c696420696e64696365730000000000000000000000000000000000600082015250565b6000611d88600f83611bac565b9150611d9382611d52565b602082019050919050565b60006020820190508181036000830152611db781611d7b565b9050919050565b7f456e6420696e646578206f7574206f6620626f756e6473000000000000000000600082015250565b6000611df4601783611bac565b9150611dff82611dbe565b602082019050919050565b60006020820190508181036000830152611e2381611de7565b9050919050565b6000611e3582611c29565b9150611e4083611c29565b9250828203905081811115611e5857611e5761137a565b5b92915050565b7f496e76616c696420686578206368617261637465720000000000000000000000600082015250565b6000611e94601583611bac565b9150611e9f82611e5e565b602082019050919050565b60006020820190508181036000830152611ec381611e87565b905091905056fe4d363530203339392e393939393936313330393632333643363530203536312e36373337383533303437353135203536312e36373337383931373337383931203633352e3735343938313838353934383220343030203633352e37353439383138383539343832433233382e33323639323330373639323331203633352e3735343938313838353934383220313530203536312e3637333738353330343735313520313530203339392e393939393936313330393632333643313530203233382e33323639313932303738383534203233382e33323639323330373639323331203136342e323435303130333735393736353620343030203136342e3234353031303337353937363536433536312e36373337383931373337383931203136342e323435303130333735393736353620363530203233382e3332363931393230373838353420363530203339392e39393939393631333039363233365a204d363530203339392e3939393938383631303234383643363530203536312e36373337373737383430333737203536312e36373337383931373337383931203636342e3234353030323835353236323820343030203636342e32343530303238353532363238433233382e33323639323330373639323331203636342e3234353030323835353236323820313530203536312e3637333737373738343033373720313530203339392e3939393938383631303234383643313530203233382e3332363931313638373137313637203233382e33323639323330373639323331203133352e373534393734333635323334333820343030203133352e3735343937343336353233343338433536312e36373337383931373337383931203133352e373534393734333635323334333820363530203233382e333236393131363837313731363720363530203339392e393939393838363130323438365a204d363530203339392e393939393834373832333339373743363530203535322e39353832303538303635393835203535322e39353832323130323432353838203637362e3935343136323637393931333920343030203637362e39353431363236373939313339433234372e3034323435323833303138383637203637362e3935343136323637393931333920313530203535322e3935383230353830363539383520313530203339392e393939393834373832333339373743313530203234372e3034323433373631323532383433203234372e3034323435323833303138383637203132332e303435383036383834373635363220343030203132332e3034353830363838343736353632433535322e39353832323130323432353838203132332e303435383036383834373635363220363530203234372e303432343337363132353238343320363530203339392e39393939383437383233333937375a20a26469706673582212205cf99f82ba695f124b365a6a99648f149c9cc3bb996c2c0addbe3b56df25ac1364736f6c63430008140033",
  "devdoc": {
    "errors": {
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}