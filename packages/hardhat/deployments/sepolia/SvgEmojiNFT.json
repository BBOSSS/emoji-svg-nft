{
  "address": "0x4cf8A071dbFc50d05E9e80dE9c44d1698B3DE46d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC721EnumerableForbiddenBatchMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721IncorrectOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721InsufficientApproval",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC721InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC721NonexistentToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "ERC721OutOfBoundsIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "NftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "NftRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curve",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "limit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIdToTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useVRF",
          "type": "bool"
        }
      ],
      "name": "setUseVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useVRF",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9fba06fc6d55a8808cfd6b5b26341b278a526ea7a148ac0e3867050d230475d",
  "receipt": {
    "to": null,
    "from": "0x1cC6164C851945D7Ea266f90dc2C89117faD7379",
    "contractAddress": "0x4cf8A071dbFc50d05E9e80dE9c44d1698B3DE46d",
    "transactionIndex": 34,
    "gasUsed": "5019505",
    "logsBloom": "0x
    "blockHash": "0x5073f7d048d5fbf0afdb952425ddb18df5aa9bf22f13eb4245fa51db283c93df",
    "transactionHash": "0xb9fba06fc6d55a8808cfd6b5b26341b278a526ea7a148ac0e3867050d230475d",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 6598201,
        "transactionHash": "0xb9fba06fc6d55a8808cfd6b5b26341b278a526ea7a148ac0e3867050d230475d",
        "address": "0x4cf8A071dbFc50d05E9e80dE9c44d1698B3DE46d",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 56,
        "blockHash": "0x5073f7d048d5fbf0afdb952425ddb18df5aa9bf22f13eb4245fa51db283c93df"
      }
    ],
    "blockNumber": 6598201,
    "cumulativeGasUsed": "14412099",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "12097",
    "500000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c"
  ],
  "numDeployments": 4,
  "solcInputHash": "ca0c6b3e4017b7c7c3701a558a11d857",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"NftRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIdToTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useVRF\",\"type\":\"bool\"}],\"name\":\"setUseVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useVRF\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SvgEmojiNFT.sol\":\"SvgEmojiNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {IERC721Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721\\n    struct ERC721Storage {\\n        // Token name\\n        string _name;\\n\\n        // Token symbol\\n        string _symbol;\\n\\n        mapping(uint256 tokenId => address) _owners;\\n\\n        mapping(address owner => uint256) _balances;\\n\\n        mapping(uint256 tokenId => address) _tokenApprovals;\\n\\n        mapping(address owner => mapping(address operator => bool)) _operatorApprovals;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721StorageLocation = 0x80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300;\\n\\n    function _getERC721Storage() private pure returns (ERC721Storage storage $) {\\n        assembly {\\n            $.slot := ERC721StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return $._balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        return $._tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        unchecked {\\n            $._balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                $._balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                $._balances[to] += 1;\\n            }\\n        }\\n\\n        $._owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        $._tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC721Storage storage $ = _getERC721Storage();\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x48efca78ce4e1a9f74d3ca8539bb53d04b116e507c10cd9e0df6105b8a6ae420\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721Upgradeable} from \\\"../ERC721Upgradeable.sol\\\";\\nimport {IERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: `ERC721` extensions that implement custom `balanceOf` logic, such as `ERC721Consecutive`,\\n * interfere with enumerability and should not be used together with `ERC721Enumerable`.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721Enumerable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC721Enumerable\\n    struct ERC721EnumerableStorage {\\n        mapping(address owner => mapping(uint256 index => uint256)) _ownedTokens;\\n        mapping(uint256 tokenId => uint256) _ownedTokensIndex;\\n\\n        uint256[] _allTokens;\\n        mapping(uint256 tokenId => uint256) _allTokensIndex;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC721Enumerable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC721EnumerableStorageLocation = 0x645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed00;\\n\\n    function _getERC721EnumerableStorage() private pure returns (ERC721EnumerableStorage storage $) {\\n        assembly {\\n            $.slot := ERC721EnumerableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return $._ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        return $._allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return $._allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        uint256 length = balanceOf(to) - 1;\\n        $._ownedTokens[to][length] = tokenId;\\n        $._ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        $._allTokensIndex[tokenId] = $._allTokens.length;\\n        $._allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = $._ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = $._ownedTokens[from][lastTokenIndex];\\n\\n            $._ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            $._ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._ownedTokensIndex[tokenId];\\n        delete $._ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        ERC721EnumerableStorage storage $ = _getERC721EnumerableStorage();\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = $._allTokens.length - 1;\\n        uint256 tokenIndex = $._allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = $._allTokens[lastTokenIndex];\\n\\n        $._allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        $._allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete $._allTokensIndex[tokenId];\\n        $._allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xe3c0b8baf1c6c26bd7944f5c7e71d0e902cbd1a90509f093524c289b89ad5344\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/DefineLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Defs {\\n\\tusing Strings for uint256;\\n\\n\\tstruct HeadInfo {\\n\\t\\tbytes color;\\n\\t\\tuint8 shape;\\n\\t}\\n\\n\\tstruct EyesInfo {\\n\\t\\tEyeInfo left;\\n\\t\\tEyeInfo right;\\n\\t}\\n\\n\\tstruct EyeInfo {\\n\\t\\tuint16 rx;\\n\\t\\tuint16 ry;\\n\\t\\tuint16 cx;\\n\\t\\tuint16 cy;\\n\\t}\\n\\n\\tstruct MouthInfo {\\n\\t\\tuint16 size;\\n\\t\\tuint16 width;\\n\\t\\tuint16 rotation;\\n\\t}\\n\\n\\tfunction headDescription(\\n\\t\\tHeadInfo memory head\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"color=#\\\",\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t\\\", shape=\\\",\\n\\t\\t\\tuint256(head.shape).toString()\\n\\t\\t);\\n\\t}\\n\\n\\tfunction eyeDescription(\\n\\t\\tEyeInfo memory eye\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"[\\\",\\n\\t\\t\\tuint256(eye.rx).toString(),\\n\\t\\t\\t\\\", \\\",\\n\\t\\t\\tuint256(eye.ry).toString(),\\n\\t\\t\\t\\\", \\\",\\n\\t\\t\\tuint256(eye.cx).toString(),\\n\\t\\t\\t\\\", \\\",\\n\\t\\t\\tuint256(eye.cy).toString(),\\n\\t\\t\\t\\\"]\\\"\\n\\t\\t);\\n\\t}\\n\\n\\tfunction eyesDescription(\\n\\t\\tEyesInfo memory eyes\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"left=\\\",\\n\\t\\t\\tstring(eyeDescription(eyes.left)),\\n\\t\\t\\t\\\", right=\\\",\\n\\t\\t\\tstring(eyeDescription(eyes.right))\\n\\t\\t);\\n\\t}\\n\\n\\tfunction mouthDescription(\\n\\t\\tMouthInfo memory mouth\\n\\t) internal pure returns (bytes memory desc) {\\n\\t\\tdesc = abi.encodePacked(\\n\\t\\t\\t\\\"size=\\\",\\n\\t\\t\\tuint256(mouth.size).toString(),\\n\\t\\t\\t\\\", width=\\\",\\n\\t\\t\\tuint256(mouth.width).toString(),\\n\\t\\t\\t\\\", rotation=\\\",\\n\\t\\t\\tuint256(mouth.rotation).toString()\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa055b1f5e5f5b3826f9f4693520b4ebf9726fdc22b7b6fa04085d0068782aab8\",\"license\":\"MIT\"},\"contracts/HexColor.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary HexColor {\\n\\tfunction getGradientColor(\\n\\t\\tstring memory hexColor,\\n\\t\\tint amt\\n\\t) internal pure returns (string memory) {\\n\\t\\tint num = int(parseHexToUint(hexColor));\\n\\t\\tuint r = check((num >> 16) + amt);\\n\\t\\tuint b = check(((num >> 8) & 0x00ff) + amt);\\n\\t\\tuint g = check((num & 0x0000ff) + amt);\\n\\t\\tuint rgb = (g | (b << 8) | (r << 16));\\n\\t\\tstring memory result = Strings.toHexString(rgb, 3);\\n\\t\\treturn substring(result, 2, -1);\\n\\t}\\n\\n\\tfunction parseHexToUint(\\n\\t\\tstring memory hexColor\\n\\t) internal pure returns (uint) {\\n\\t\\tbytes memory hexBytes = bytes(hexColor);\\n\\t\\trequire(hexBytes.length == 6, \\\"Invalid hex color string length\\\");\\n\\n\\t\\tuint result = 0;\\n\\t\\tfor (uint256 i = 0; i < hexBytes.length; i++) {\\n\\t\\t\\tresult *= 16;\\n\\t\\t\\tresult += hexCharToUint(uint8(hexBytes[i]));\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\tfunction hexCharToUint(uint8 b) internal pure returns (uint) {\\n\\t\\tif (b >= 48 && b <= 57) {\\n\\t\\t\\treturn b - 48; // '0' - '9'\\n\\t\\t} else if (b >= 97 && b <= 102) {\\n\\t\\t\\treturn b - 87; // 'a' - 'f', 'a' = 10\\n\\t\\t} else if (b >= 65 && b <= 70) {\\n\\t\\t\\treturn b - 55; // 'A' - 'F', 'A' = 10\\n\\t\\t} else {\\n\\t\\t\\trevert(\\\"Invalid hex character\\\");\\n\\t\\t}\\n\\t}\\n\\n\\tfunction check(int x) internal pure returns (uint) {\\n\\t\\tif (x > 255) {\\n\\t\\t\\treturn 255;\\n\\t\\t} else if (x < 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\treturn uint(x);\\n\\t}\\n\\n\\tfunction substring(\\n\\t\\tstring memory str,\\n\\t\\tint startIndex,\\n\\t\\tint endIndex\\n\\t) public pure returns (string memory) {\\n\\t\\tbytes memory strBytes = bytes(str);\\n\\t\\tuint start = 0;\\n\\t\\tuint end = strBytes.length;\\n\\t\\tif (startIndex >= 0) {\\n\\t\\t\\tstart = uint(startIndex);\\n\\t\\t}\\n\\t\\tif (endIndex >= 0) {\\n\\t\\t\\tend = uint(endIndex);\\n\\t\\t}\\n\\t\\trequire(start < end, \\\"Invalid indices\\\");\\n\\t\\trequire(end <= strBytes.length, \\\"End index out of bounds\\\");\\n\\n\\t\\tbytes memory result = new bytes(end - start);\\n\\n\\t\\tfor (uint i = start; i < end; i++) {\\n\\t\\t\\tresult[i - start] = strBytes[i];\\n\\t\\t}\\n\\n\\t\\treturn string(result);\\n\\t}\\n}\\n\",\"keccak256\":\"0xab57949db97b4d89bf79e1b1ed42f69e002486aff55e0d975a46511f79e9ba0f\",\"license\":\"MIT\"},\"contracts/SvgEmoji.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"base64-sol/base64.sol\\\";\\n\\nimport \\\"./HexColor.sol\\\";\\nimport \\\"./DefineLib.sol\\\";\\n\\nlibrary SvgEmoji {\\n\\tusing Strings for uint256;\\n\\n\\tfunction tokenURI(\\n        uint256 id,\\n        address owner,\\n\\t\\tDefs.HeadInfo memory head,\\n\\t\\tDefs.EyesInfo memory eyes,\\n\\t\\tDefs.MouthInfo memory mouth\\n\\t) public pure returns (string memory) {\\n        bytes memory name = abi.encodePacked(\\\"Emoji #\\\", id.toString());\\n\\t\\tbytes memory description = abi.encodePacked(\\n\\t\\t\\t\\\"Emoji: \\\",\\n\\t\\t\\tstring(Defs.headDescription(head)),\\n\\t\\t\\t\\\", Eyes: \\\",\\n\\t\\t\\tstring(Defs.eyesDescription(eyes)),\\n\\t\\t\\t\\\", Mouth: \\\",\\n\\t\\t\\tstring(Defs.mouthDescription(mouth))\\n\\t\\t);\\n\\t\\tstring memory image = Base64.encode(\\n\\t\\t\\trenderSvgImage(head, eyes, mouth)\\n\\t\\t);\\n\\t\\tbytes memory json = abi.encodePacked(\\n\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\tstring(name),\\n\\t\\t\\t'\\\", \\\"description\\\":\\\"',\\n\\t\\t\\tstring(description),\\n\\t\\t\\t'\\\", \\\"external_url\\\":\\\"',\\n\\t\\t\\t'\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"emoji\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tstring(Defs.headDescription(head)),\\n\\t\\t\\t'\\\"},{\\\"trait_type\\\": \\\"eyes\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tstring(Defs.eyesDescription(eyes)),\\n\\t\\t\\t'\\\"},{\\\"trait_type\\\": \\\"mouth\\\", \\\"value\\\": \\\"',\\n\\t\\t\\tstring(Defs.mouthDescription(mouth)),\\n\\t\\t\\t'\\\"}], \\\"owner\\\":\\\"',\\n\\t\\t\\tuint256(uint160(owner)).toHexString(20),\\n\\t\\t\\t'\\\", \\\"image\\\": \\\"',\\n\\t\\t\\t\\\"data:image/svg+xml;base64,\\\",\\n\\t\\t\\timage,\\n\\t\\t\\t'\\\"}'\\n\\t\\t);\\n\\t\\tbytes memory base64 = abi.encodePacked(\\n\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\tBase64.encode(json)\\n\\t\\t);\\n\\t\\treturn string(base64);\\n    }\\n\\n\\tfunction tempTokenURI(\\n        uint256 id,\\n        address owner\\n\\t) public pure returns (string memory) {\\n\\t\\tbytes memory name = abi.encodePacked(\\\"Emoji #\\\", id.toString());\\n\\t\\tbytes memory image = abi.encodePacked(\\n\\t\\t\\t'<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 800 800\\\">',\\n\\t\\t\\t'<text x=\\\"100\\\" y=\\\"350\\\" font-family=\\\"inherit\\\" font-size=\\\"80\\\">Emoji is minting...</text></svg>'\\n\\t\\t);\\n\\t\\tbytes memory json = abi.encodePacked(\\n\\t\\t\\t'{\\\"name\\\":\\\"',\\n\\t\\t\\tstring(name),\\n\\t\\t\\t'\\\", \\\"description\\\":\\\"\\\", \\\"external_url\\\":\\\"\\\", \\\"attributes\\\": [], \\\"owner\\\":\\\"',\\n\\t\\t\\tuint256(uint160(owner)).toHexString(20),\\n\\t\\t\\t'\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n\\t\\t\\tBase64.encode(image),\\n\\t\\t\\t'\\\"}'\\n\\t\\t);\\n\\t\\tbytes memory base64 = abi.encodePacked(\\n\\t\\t\\t\\\"data:application/json;base64,\\\",\\n\\t\\t\\tBase64.encode(json)\\n\\t\\t);\\n\\t\\treturn string(base64);\\n\\t}\\n\\n\\tfunction renderSvgImage(\\n\\t\\tDefs.HeadInfo memory head,\\n\\t\\tDefs.EyesInfo memory eyes,\\n\\t\\tDefs.MouthInfo memory mouth\\n\\t) public pure returns (bytes memory image) {\\n\\t\\t(bytes memory headDefs, bytes memory headData) = SvgHead.getEmojiHead(head);\\n\\t\\t(bytes memory eyesDefs, bytes memory eyesData) = SvgEyes.getEmojiEyes(eyes);\\n\\t\\t(bytes memory mouthDefs, bytes memory mouthData) = SvgMouth.getEmojiMouth(mouth);\\n\\t\\timage = abi.encodePacked(\\n\\t\\t\\t'<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 800 800\\\"><defs>',\\n\\t\\t\\tstring(headDefs),\\n\\t\\t\\tstring(eyesDefs),\\n\\t\\t\\tstring(mouthDefs),\\n\\t\\t\\t'</defs><g stroke-linecap=\\\"round\\\">',\\n\\t\\t\\tstring(headData),\\n\\t\\t\\tstring(eyesData),\\n\\t\\t\\tstring(mouthData),\\n\\t\\t\\t\\\"</g></svg>\\\"\\n\\t\\t);\\n\\t}\\n}\\n\\nlibrary SvgHead {\\n\\tfunction getEmojiHead(\\n\\t\\tDefs.HeadInfo memory headInfo\\n\\t) external pure returns (bytes memory defs, bytes memory data) {\\n\\t\\t// HeadInfo memory headInfo = HeadInfo(\\\"ffe499\\\", 0);\\t// debug\\n\\t\\tstring memory baseColor = string(headInfo.color);\\n\\t\\tstring memory stopColor1 = HexColor.getGradientColor(baseColor, -54);\\n\\t\\tstring memory stopColor2 = HexColor.getGradientColor(baseColor, 50);\\n\\t\\tdefs = abi.encodePacked(\\n\\t\\t\\t'<radialGradient id=\\\"svgemoji-grad-dark\\\" r=\\\"93%\\\" cx=\\\"20%\\\" cy=\\\"20%\\\"><stop offset=\\\"70%\\\" stop-color=\\\"#',\\n\\t\\t\\tbaseColor,\\n\\t\\t\\t'\\\" stop-opacity=\\\"0\\\"></stop><stop offset=\\\"97%\\\" stop-color=\\\"#',\\n\\t\\t\\tstopColor1,\\n\\t\\t\\t'\\\" stop-opacity=\\\"1\\\"></stop></radialGradient><radialGradient id=\\\"svgemoji-grad-light\\\" r=\\\"65%\\\" cx=\\\"28%\\\" cy=\\\"20%\\\"><stop offset=\\\"0%\\\" stop-color=\\\"#',\\n\\t\\t\\tstopColor2,\\n\\t\\t\\t'\\\" stop-opacity=\\\"0.75\\\"></stop><stop offset=\\\"100%\\\" stop-color=\\\"#',\\n\\t\\t\\tbaseColor,\\n\\t\\t\\t'\\\" stop-opacity=\\\"0\\\"></stop></radialGradient><filter id=\\\"svgemoji-blur\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" ',\\n\\t\\t\\t'color-interpolation-filters=\\\"sRGB\\\"><feGaussianBlur stdDeviation=\\\"30\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" ',\\n\\t\\t\\t'in=\\\"SourceGraphic\\\" edgeMode=\\\"none\\\" result=\\\"blur\\\"></feGaussianBlur></filter><filter id=\\\"inner-blur\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" ',\\n\\t\\t\\t'filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" color-interpolation-filters=\\\"sRGB\\\">',\\n\\t\\t\\t'<feGaussianBlur stdDeviation=\\\"2\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" in=\\\"SourceGraphic\\\" edgeMode=\\\"none\\\" result=\\\"blur\\\"></feGaussianBlur></filter>'\\n\\t\\t);\\n\\n\\t\\tif (headInfo.shape == 0) {\\n\\t\\t\\tdata = getCircleHeadData(headInfo);\\n\\t\\t} else {\\n\\t\\t\\tdata = getIrregularHeadData(headInfo);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction getCircleHeadData(\\n\\t\\tDefs.HeadInfo memory head\\n\\t) private pure returns (bytes memory data) {\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\" opacity=\\\"0.25\\\" filter=\\\"url(#svgemoji-blur)\\\" transform=\\\"translate(-10, 60)\\\"></circle>',\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\"></circle>',\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"url(#svgemoji-grad-dark)\\\"></circle>',\\n\\t\\t\\t'<circle r=\\\"250\\\" cx=\\\"400\\\" cy=\\\"400\\\" fill=\\\"url(#svgemoji-grad-light)\\\"></circle>'\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getIrregularHeadData(\\n\\t\\tDefs.HeadInfo memory head\\n\\t) private pure returns (bytes memory data) {\\n\\t\\tstring[4] memory heads = [\\n\\t\\t\\t\\\"M650 399.99999613096236C650 561.6737853047515 561.6737891737891 635.7549818859482 400 635.7549818859482C238.3269230769231 635.7549818859482 150 561.6737853047515 150 399.99999613096236C150 238.3269192078854 238.3269230769231 164.24501037597656 400 164.24501037597656C561.6737891737891 164.24501037597656 650 238.3269192078854 650 399.99999613096236Z \\\",\\n\\t\\t\\t\\\"M650 399.9999886102486C650 561.6737777840377 561.6737891737891 664.2450028552628 400 664.2450028552628C238.3269230769231 664.2450028552628 150 561.6737777840377 150 399.9999886102486C150 238.32691168717167 238.3269230769231 135.75497436523438 400 135.75497436523438C561.6737891737891 135.75497436523438 650 238.32691168717167 650 399.9999886102486Z \\\",\\n\\t\\t\\t\\\"M650 399.99998478233977C650 552.9582058065985 552.9582210242588 676.9541626799139 400 676.9541626799139C247.04245283018867 676.9541626799139 150 552.9582058065985 150 399.99998478233977C150 247.04243761252843 247.04245283018867 123.04580688476562 400 123.04580688476562C552.9582210242588 123.04580688476562 650 247.04243761252843 650 399.99998478233977Z \\\",\\n\\t\\t\\t\\\"M650 399.99999613096236C650 561.6737853047515 561.6737891737891 635.7549818859482 400 635.7549818859482C238.3269230769231 635.7549818859482 150 561.6737853047515 150 399.99999613096236C150 238.3269192078854 238.3269230769231 164.24501037597656 400 164.24501037597656C561.6737891737891 164.24501037597656 650 238.3269192078854 650 399.99999613096236Z \\\"\\n\\t\\t];\\n\\t\\tstring memory headShape = heads[head.shape - 1];\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\t'<path d=\\\"M650 449.99998478233977C650 602.9582058065985 552.9582210242588 726.9541626799139 400 726.9541626799139C247.04245283018867 726.9541626799139 150 602.9582058065985 150 449.99998478233977C150 297.04243761252843 247.04245283018867 173.04580688476562 400 173.04580688476562C552.9582210242588 173.04580688476562 650 297.04243761252843 650 449.99998478233977Z \\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\" opacity=\\\"0.25\\\" filter=\\\"url(#svgemoji-blur)\\\"></path><path d=\\\"',\\n\\t\\t\\tstring(headShape),\\n\\t\\t\\t'\\\" fill=\\\"#',\\n\\t\\t\\tstring(head.color),\\n\\t\\t\\t'\\\"></path><path d=\\\"',\\n\\t\\t\\tstring(headShape),\\n\\t\\t\\t'\\\" fill=\\\"url(#svgemoji-grad-dark)\\\"></path><path d=\\\"',\\n\\t\\t\\tstring(headShape),\\n\\t\\t\\t'\\\" fill=\\\"url(#svgemoji-grad-light)\\\"></path>'\\n\\t\\t);\\n\\t}\\n}\\n\\nlibrary SvgEyes {\\n\\tusing Strings for uint256;\\n\\n\\tfunction getEmojiEyes(\\n\\t\\tDefs.EyesInfo memory eyes\\n\\t) external pure returns (bytes memory defs, bytes memory data) {\\n\\t\\tdefs = abi.encodePacked(\\n\\t\\t\\t'<filter id=\\\"eye-shadow\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" ',\\n\\t\\t\\t'filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" ',\\n\\t\\t\\t'color-interpolation-filters=\\\"sRGB\\\">',\\n\\t\\t\\t'<feDropShadow stdDeviation=\\\"10\\\" dx=\\\"10\\\" dy=\\\"10\\\" flood-color=\\\"#000000\\\" flood-opacity=\\\"0.3\\\" ',\\n\\t\\t\\t'x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" result=\\\"dropShadow\\\"></feDropShadow></filter>',\\n\\t\\t\\t'<linearGradient id=\\\"eye-light\\\" gradientTransform=\\\"rotate(-25)\\\" x1=\\\"50%\\\" y1=\\\"0%\\\" x2=\\\"50%\\\" y2=\\\"100%\\\">',\\n\\t\\t\\t'<stop offset=\\\"20%\\\" stop-color=\\\"#323232\\\" stop-opacity=\\\"1\\\"></stop>',\\n\\t\\t\\t'<stop offset=\\\"100%\\\" stop-color=\\\"#000000\\\" stop-opacity=\\\"0\\\"></stop></linearGradient>'\\n\\t\\t);\\n\\t\\tbytes memory leftTemp = abi.encodePacked(\\n\\t\\t\\t'rx=\\\"',\\n\\t\\t\\tuint256(eyes.left.rx).toString(),\\n\\t\\t\\t'\\\" ry=\\\"',\\n\\t\\t\\tuint256(eyes.left.ry).toString(),\\n\\t\\t\\t'\\\" cx=\\\"',\\n\\t\\t\\tuint256(eyes.left.cx).toString(),\\n\\t\\t\\t'\\\" cy=\\\"',\\n\\t\\t\\tuint256(eyes.left.cy).toString()\\n\\t\\t);\\n\\t\\tbytes memory rightTemp = abi.encodePacked(\\n\\t\\t\\t'rx=\\\"',\\n\\t\\t\\tuint256(eyes.right.rx).toString(),\\n\\t\\t\\t'\\\" ry=\\\"',\\n\\t\\t\\tuint256(eyes.right.ry).toString(),\\n\\t\\t\\t'\\\" cx=\\\"',\\n\\t\\t\\tuint256(eyes.right.cx).toString(),\\n\\t\\t\\t'\\\" cy=\\\"',\\n\\t\\t\\tuint256(eyes.right.cy).toString()\\n\\t\\t);\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\t\\\"<g><ellipse \\\",\\n\\t\\t\\tstring(leftTemp),\\n\\t\\t\\t'\\\" fill=\\\"#000000\\\" filter=\\\"url(#eye-shadow)\\\"></ellipse><ellipse ',\\n\\t\\t\\tstring(leftTemp),\\n\\t\\t\\t'\\\" fill=\\\"url(#eye-light)\\\" filter=\\\"url(#inner-blur)\\\"></ellipse></g>',\\n\\t\\t\\t\\\"<g><ellipse \\\",\\n\\t\\t\\tstring(rightTemp),\\n\\t\\t\\t'\\\" fill=\\\"#000000\\\" filter=\\\"url(#eye-shadow)\\\"></ellipse><ellipse ',\\n\\t\\t\\tstring(rightTemp),\\n\\t\\t\\t'\\\" fill=\\\"url(#eye-light)\\\" filter=\\\"url(#inner-blur)\\\"></ellipse></g>'\\n\\t\\t);\\n\\t}\\n}\\n\\nlibrary SvgMouth {\\n\\tusing Strings for uint256;\\n\\n\\tfunction getEmojiMouth(\\n\\t\\tDefs.MouthInfo memory mouth\\n\\t) external pure returns (bytes memory defs, bytes memory data) {\\n\\t\\tdefs = abi.encodePacked(\\n\\t\\t\\t'<linearGradient id=\\\"mouth-light\\\" x1=\\\"50%\\\" y1=\\\"0%\\\" x2=\\\"50%\\\" y2=\\\"100%\\\">',\\n\\t\\t\\t'<stop offset=\\\"0%\\\" stop-color=\\\"#ff9667\\\" stop-opacity=\\\"1\\\"></stop>',\\n\\t\\t\\t'<stop offset=\\\"100%\\\" stop-color=\\\"#ff1205\\\" stop-opacity=\\\"0\\\"></stop></linearGradient>',\\n\\t\\t\\t'<filter id=\\\"mouth-shadow\\\" x=\\\"-100%\\\" y=\\\"-100%\\\" width=\\\"400%\\\" height=\\\"400%\\\" ',\\n\\t\\t\\t'filterUnits=\\\"objectBoundingBox\\\" primitiveUnits=\\\"userSpaceOnUse\\\" ',\\n\\t\\t\\t'color-interpolation-filters=\\\"sRGB\\\">',\\n\\t\\t\\t'<feDropShadow stdDeviation=\\\"10\\\" dx=\\\"10\\\" dy=\\\"10\\\" x=\\\"0%\\\" y=\\\"0%\\\" width=\\\"100%\\\" height=\\\"100%\\\" ',\\n\\t\\t\\t'result=\\\"dropShadow\\\" flood-color=\\\"#c20000\\\" flood-opacity=\\\"0.9\\\"></feDropShadow></filter>'\\n\\t\\t);\\n\\t\\tuint16 s = 350 - mouth.size;\\n\\t\\tuint16 c = 400 - mouth.size;\\n\\t\\tuint16 e = 450 + mouth.size;\\n\\t\\tbytes memory temp = abi.encodePacked(\\n\\t\\t\\t'<path d=\\\"M',\\n\\t\\t\\tuint256(s).toString(),\\n\\t\\t\\t\\\" 512.5Q\\\",\\n\\t\\t\\tuint256(c).toString(),\\n\\t\\t\\t\\\" 562.5 \\\",\\n\\t\\t\\tuint256(e).toString(),\\n\\t\\t\\t' 512.5\\\" transform=\\\"rotate(',\\n\\t\\t\\tuint256(mouth.rotation).toString(),\\n\\t\\t\\t', 400, 400)\\\"'\\n\\t\\t);\\n\\n\\t\\tdata = abi.encodePacked(\\n\\t\\t\\tstring(temp),\\n\\t\\t\\t' stroke-width=\\\"',\\n\\t\\t\\tuint256(mouth.width).toString(),\\n\\t\\t\\t'\\\" stroke=\\\"#ff1205\\\"',\\n\\t\\t\\t' fill=\\\"none\\\" filter=\\\"url(#mouth-shadow)\\\"></path>',\\n\\t\\t\\tstring(temp),\\n\\t\\t\\t' stroke-width=\\\"6\\\" stroke=\\\"url(#mouth-light)\\\" fill=\\\"none\\\"'\\n\\t\\t\\t' filter=\\\"url(#inner-blur)\\\"></path>'\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xe0fa0d4fb5cc0f7a1344be6b23eb50a426e854a03147e41910c9dad89126573e\",\"license\":\"MIT\"},\"contracts/SvgEmojiNFT.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\nimport \\\"./DefineLib.sol\\\";\\nimport \\\"./SvgEmoji.sol\\\";\\n\\n//learn more: https://docs.openzeppelin.com/contracts/3.x/erc721\\n\\n// GET LISTED ON OPENSEA: https://testnets.opensea.io/get-listed/step-two\\n\\ncontract SvgEmojiNFT is\\n\\tInitializable,\\n\\tUUPSUpgradeable,\\n\\tERC721EnumerableUpgradeable,\\n\\tOwnableUpgradeable,\\n\\tVRFConsumerBaseV2\\n{\\n\\tusing Strings for uint256;\\n\\n    event NftRequested(address indexed minter, uint256 indexed requestId);\\n    event NftMinted(address indexed minter, uint256 indexed tokenId, uint256 indexed requestId);\\n\\tevent Withdraw(address indexed addr, uint256 amount);\\n\\n\\tuint256 private _tokenIds;\\n\\tuint256 public constant limit = 3728;\\n\\tuint256 public constant curve = 1002; // price increase 0.2% with each purchase\\n\\tuint256 public price;\\n\\n\\tmapping(uint256 => Defs.HeadInfo) private headMap;\\n\\tmapping(uint256 => Defs.EyesInfo) private eyesMap;\\n\\tmapping(uint256 => Defs.MouthInfo) private mouthMap;\\n\\n\\tmapping(uint256 => bool) private tokenIdMinted;\\n\\n    // Chainlink VRF Variables\\n\\tbool public useVRF;\\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\\n    bytes32 private immutable gasLane;\\n    uint64 private immutable subscriptionId;\\n    uint32 private immutable callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 2;\\n    mapping(uint256 => uint256) public requestIdToTokenId;\\n\\n\\tconstructor(\\n\\t\\taddress _vrfCoordinatorV2,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit,\\n        bytes32 _gasLane\\t// keyHash\\n\\t) VRFConsumerBaseV2(_vrfCoordinatorV2) {\\n\\t\\tvrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorV2);\\n\\t\\tsubscriptionId = _subscriptionId;\\n\\t\\tcallbackGasLimit = _callbackGasLimit;\\n\\t\\tgasLane = _gasLane;\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\tfunction _authorizeUpgrade(\\n\\t\\taddress _newImplementation\\n\\t) internal override onlyOwner {}\\n\\n\\tfunction initialize() public initializer {\\n\\t\\t__ERC721_init(\\\"DynamicSvgEmojis\\\", \\\"EMOJI\\\");\\n\\t\\t__ERC721Enumerable_init();\\n\\t\\t__Ownable_init(msg.sender);\\n\\t\\t__UUPSUpgradeable_init();\\n\\t\\tprice = 0.001 ether;\\n\\t\\tuseVRF = false;\\n\\t}\\n\\n\\tfunction setUseVRF(bool _useVRF) public onlyOwner {\\n\\t\\tuseVRF = _useVRF;\\n\\t}\\n\\n\\tfunction mintItem() public payable returns (uint256) {\\n\\t\\trequire(_tokenIds < limit, \\\"DONE MINTING\\\");\\n\\t\\trequire(msg.value >= price, \\\"NOT ENOUGH\\\");\\n\\n\\t\\tprice = (price * curve) / 1000;\\n\\t\\t_tokenIds++;\\n\\n\\t\\tif (!useVRF) {\\n\\t\\t\\treturn mintWithoutVRF();\\n\\t\\t}\\n\\n\\t\\tuint256 requestId = vrfCoordinator.requestRandomWords(\\n\\t        gasLane,\\n\\t        subscriptionId,\\n\\t        REQUEST_CONFIRMATIONS,\\n\\t        callbackGasLimit,\\n\\t        NUM_WORDS\\n\\t    );\\n\\t\\trequestIdToTokenId[requestId] = _tokenIds;\\n\\t\\t_safeMint(msg.sender, _tokenIds);\\n\\t\\temit NftRequested(msg.sender, requestId);\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\tfunction mintWithoutVRF() private returns (uint256) {\\n\\t\\tuint256 id = _tokenIds;\\n\\t\\tbytes32 prevHash1 = blockhash(block.number - 1);\\n\\t\\tbytes32 hash1 = keccak256(abi.encodePacked(prevHash1, address(this)));\\n\\t\\tbytes32 prevHash2 = blockhash(block.number - 2);\\n\\t\\tbytes32 hash2 = keccak256(abi.encodePacked(prevHash2, address(this)));\\n\\t\\tuint256[] memory randomWords = new uint[](2);\\n\\t\\trandomWords[0] = uint256(hash1);\\n\\t\\trandomWords[1] = uint256(hash2);\\n\\t\\trandomHead(id, randomWords);\\n\\t\\trandomEyes(id, randomWords);\\n\\t\\trandomMouth(id, randomWords);\\n\\t\\t_safeMint(msg.sender, _tokenIds);\\n\\t\\ttokenIdMinted[id] = true;\\n\\t\\treturn _tokenIds;\\n\\t}\\n\\n\\tfunction fulfillRandomWords(\\n\\t\\tuint256 requestId,\\n\\t\\tuint256[] memory randomWords\\n\\t) internal override {\\n\\t\\trequire(randomWords.length >= NUM_WORDS, \\\"Not enough random numbers\\\");\\n\\t\\tuint256 id = requestIdToTokenId[requestId];\\n\\t\\trandomHead(id, randomWords);\\n\\t\\trandomEyes(id, randomWords);\\n\\t\\trandomMouth(id, randomWords);\\n\\t\\ttokenIdMinted[id] = true;\\n\\t\\temit NftMinted(_ownerOf(id), id, requestId);\\n\\t}\\n\\n\\tfunction tokenURI(uint256 id) public view override returns (string memory) {\\n\\t\\trequire(_ownerOf(id) != address(0), \\\"not exist\\\");\\n\\t\\taddress owner = ownerOf(id);\\n\\t\\tif (!tokenIdMinted[id]) {\\n\\t\\t\\treturn SvgEmoji.tempTokenURI(id, owner);\\n\\t\\t}\\n\\t\\treturn SvgEmoji.tokenURI(id, owner, headMap[id], eyesMap[id], mouthMap[id]);\\n\\t}\\n\\n\\tfunction withdraw() public onlyOwner {\\n\\t\\tuint256 amount = address(this).balance;\\n\\t\\t(bool success, ) = payable(msg.sender).call{ value: amount }(\\\"\\\");\\n\\t\\trequire(success, \\\"Withdraw failed\\\");\\n\\t\\temit Withdraw(msg.sender, amount);\\n\\t}\\n\\n\\tfunction randomHead(uint256 id, uint256[] memory randomWords) internal {\\n\\t\\tstring[21] memory colors = [\\n\\t\\t\\t\\\"ffe499\\\", \\\"eadc9a\\\", \\\"f4b58b\\\", \\\"ffca57\\\", \\\"fcd303\\\", \\\"cc6600\\\", \\\"bad728\\\",\\n\\t\\t\\t\\\"82d4b6\\\", \\\"688abb\\\", \\\"288ed7\\\", \\\"576bcb\\\", \\\"f03346\\\", \\\"4c4d4d\\\", \\\"b517a7\\\",\\n\\t\\t\\t\\\"e21d6f\\\", \\\"ffb3cb\\\", \\\"b4ffad\\\", \\\"75ffdf\\\", \\\"99d5ff\\\", \\\"c69eff\\\", \\\"ff5770\\\"\\n\\t\\t];\\n\\t\\tuint256 index = randomWords[0] % 21;\\n\\t\\tuint256 headShape = randomWords[1] % 5;\\n\\t\\theadMap[id] = Defs.HeadInfo(bytes(colors[index]), uint8(headShape));\\n\\t}\\n\\n\\tfunction randomEyes(uint256 id, uint256[] memory randomWords) internal {\\n\\t\\teyesMap[id] = Defs.EyesInfo({\\n\\t\\t\\tleft: Defs.EyeInfo(39, 39, 306, 340),\\n\\t\\t\\tright: Defs.EyeInfo(39, 39, 486, 340)\\n\\t\\t});\\n\\t\\tuint256 r = randomWords[0] % 80;\\n\\t\\tuint256 c = randomWords[1] % 520;\\n\\t\\tif (c % 3 == 0) {\\n\\t\\t\\teyesMap[id].left.rx = uint16(r + 20);\\n\\t\\t\\teyesMap[id].left.ry = uint16(r + 20);\\n\\t\\t\\teyesMap[id].left.cx = uint16(c + 130);\\n\\t\\t\\teyesMap[id].left.cy = uint16(c + 180);\\n\\t\\t} else if (c % 3 == 1) {\\n\\t\\t\\teyesMap[id].right.rx = uint16(r + 20);\\n\\t\\t\\teyesMap[id].right.ry = uint16(r + 20);\\n\\t\\t\\teyesMap[id].right.cx = uint16(c + 130);\\n\\t\\t\\teyesMap[id].right.cy = uint16(c + 180);\\n\\t\\t} else if (r % 2 == 0) {\\n\\t\\t\\teyesMap[id].left.rx = uint16(r + 20);\\n\\t\\t\\teyesMap[id].left.ry = uint16(r + 20);\\n\\t\\t} else {\\n\\t\\t\\teyesMap[id].right.rx = uint16(r + 20);\\n\\t\\t\\teyesMap[id].right.ry = uint16(r + 20);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction randomMouth(uint256 id, uint256[] memory randomWords) internal {\\n\\t\\tuint16 size = uint16(randomWords[0] % 50);\\n\\t\\tuint16 width = uint16((randomWords[1] % 20) + 10);\\n\\t\\tuint16 rotation = uint16(\\n\\t\\t\\t(randomWords[0] % 180) + (randomWords[1] % 180)\\n\\t\\t);\\n\\t\\tmouthMap[id] = Defs.MouthInfo(size, width, rotation);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc0e5080382d5f63f0a47499fb7097a534944ebd64ad0f7a0518b8ff00402302d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004557600080fd5b5060405162005e1538038062005e1583398181016040528101906200006b919062000386565b838073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250508060e081815250506200011f6200012960201b60201c565b5050505062000426565b60006200013b6200023360201b60201c565b90508060000160089054906101000a900460ff161562000187576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1614620002305767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff60405162000227919062000409565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200028d8262000260565b9050919050565b6200029f8162000280565b8114620002ab57600080fd5b50565b600081519050620002bf8162000294565b92915050565b600067ffffffffffffffff82169050919050565b620002e481620002c5565b8114620002f057600080fd5b50565b6000815190506200030481620002d9565b92915050565b600063ffffffff82169050919050565b62000325816200030a565b81146200033157600080fd5b50565b60008151905062000345816200031a565b92915050565b6000819050919050565b62000360816200034b565b81146200036c57600080fd5b50565b600081519050620003808162000355565b92915050565b60008060008060808587031215620003a357620003a26200025b565b5b6000620003b387828801620002ae565b9450506020620003c687828801620002f3565b9350506040620003d98782880162000334565b9250506060620003ec878288016200036f565b91505092959194509250565b6200040381620002c5565b82525050565b6000602082019050620004206000830184620003f8565b92915050565b60805160a05160c05160e051610100516101205161598a6200048b6000396000611616015260006115f3015260006115d201526000611596015260008181610917015261096b015260008181611c7f01528181611cd40152611e8f015261598a6000f3fe6080604052600436106101e35760003560e01c806370a0823111610102578063a4d66daf11610095578063e985e9c511610064578063e985e9c5146106d5578063eb93406b14610712578063f2fde38b14610730578063f877a8af14610759576101e3565b8063a4d66daf14610619578063ad3cb1cc14610644578063b88d4fde1461066f578063c87b56dd14610698576101e3565b80638da5cb5b116100d15780638da5cb5b1461056f57806395d89b411461059a578063a035b1fe146105c5578063a22cb465146105f0576101e3565b806370a08231146104d9578063715018a6146105165780637165485d1461052d5780638129fc1c14610558576101e3565b806323b872dd1161017a5780634f1ef286116101495780634f1ef286146104185780634f6ccce71461043457806352d1902d146104715780636352211e1461049c576101e3565b806323b872dd146103725780632f745c591461039b5780633ccfd60b146103d857806342842e0e146103ef576101e3565b8063081812fc116101b6578063081812fc146102b8578063095ea7b3146102f557806318160ddd1461031e5780631fe543e314610349576101e3565b806301ffc9a7146101e8578063060383411461022557806306fdde03146102505780630750b1631461027b575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190614160565b610782565b60405161021c91906141a8565b60405180910390f35b34801561023157600080fd5b5061023a6107fc565b60405161024791906141a8565b60405180910390f35b34801561025c57600080fd5b5061026561080f565b6040516102729190614253565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d91906142ab565b6108b0565b6040516102af91906142e7565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da91906142ab565b6108c8565b6040516102ec9190614343565b60405180910390f35b34801561030157600080fd5b5061031c6004803603810190610317919061438a565b6108e4565b005b34801561032a57600080fd5b506103336108fa565b60405161034091906142e7565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190614512565b610915565b005b34801561037e57600080fd5b506103996004803603810190610394919061456e565b6109d5565b005b3480156103a757600080fd5b506103c260048036038101906103bd919061438a565b610ad7565b6040516103cf91906142e7565b60405180910390f35b3480156103e457600080fd5b506103ed610b8e565b005b3480156103fb57600080fd5b506104166004803603810190610411919061456e565b610c99565b005b610432600480360381019061042d9190614676565b610cb9565b005b34801561044057600080fd5b5061045b600480360381019061045691906142ab565b610cd8565b60405161046891906142e7565b60405180910390f35b34801561047d57600080fd5b50610486610d5c565b60405161049391906146eb565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be91906142ab565b610d8f565b6040516104d09190614343565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb9190614706565b610da1565b60405161050d91906142e7565b60405180910390f35b34801561052257600080fd5b5061052b610e6a565b005b34801561053957600080fd5b50610542610e7e565b60405161054f91906142e7565b60405180910390f35b34801561056457600080fd5b5061056d610e84565b005b34801561057b57600080fd5b506105846110bf565b6040516105919190614343565b60405180910390f35b3480156105a657600080fd5b506105af6110f7565b6040516105bc9190614253565b60405180910390f35b3480156105d157600080fd5b506105da611198565b6040516105e791906142e7565b60405180910390f35b3480156105fc57600080fd5b506106176004803603810190610612919061475f565b61119e565b005b34801561062557600080fd5b5061062e6111b4565b60405161063b91906142e7565b60405180910390f35b34801561065057600080fd5b506106596111ba565b6040516106669190614253565b60405180910390f35b34801561067b57600080fd5b506106966004803603810190610691919061479f565b6111f3565b005b3480156106a457600080fd5b506106bf60048036038101906106ba91906142ab565b611210565b6040516106cc9190614253565b60405180910390f35b3480156106e157600080fd5b506106fc60048036038101906106f79190614822565b611406565b60405161070991906141a8565b60405180910390f35b61071a6114a8565b60405161072791906142e7565b60405180910390f35b34801561073c57600080fd5b5061075760048036038101906107529190614706565b611710565b005b34801561076557600080fd5b50610780600480360381019061077b9190614862565b611796565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107f557506107f4826117bb565b5b9050919050565b600660009054906101000a900460ff1681565b6060600061081b61189d565b905080600001805461082c906148be565b80601f0160208091040260200160405190810160405280929190818152602001828054610858906148be565b80156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b505050505091505090565b60076020528060005260406000206000915090505481565b60006108d3826118c5565b506108dd8261194d565b9050919050565b6108f682826108f1611998565b6119a0565b5050565b6000806109056119b2565b9050806002018054905091505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109c757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016109be9291906148ef565b60405180910390fd5b6109d182826119da565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610a3e9190614343565b60405180910390fd5b6000610a5b8383610a56611998565b611ad9565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ad1578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610ac893929190614918565b60405180910390fd5b50505050565b600080610ae26119b2565b9050610aed84610da1565b8310610b325783836040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610b2992919061494f565b60405180910390fd5b8060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205491505092915050565b610b96611bf6565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610bc1906149a9565b60006040518083038185875af1925050503d8060008114610bfe576040519150601f19603f3d011682016040523d82523d6000602084013e610c03565b606091505b5050905080610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90614a0a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436483604051610c8d91906142e7565b60405180910390a25050565b610cb4838383604051806020016040528060008152506111f3565b505050565b610cc1611c7d565b610cca82611d63565b610cd48282611d6e565b5050565b600080610ce36119b2565b9050610ced6108fa565b8310610d33576000836040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610d2a92919061494f565b60405180910390fd5b806002018381548110610d4957610d48614a2a565b5b9060005260206000200154915050919050565b6000610d66611e8d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6000610d9a826118c5565b9050919050565b600080610dac61189d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e205760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610e179190614343565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b610e72611bf6565b610e7c6000611f14565b565b6103ea81565b6000610e8e611feb565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610edc5750825b9050600060018367ffffffffffffffff16148015610f11575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610f1f575080155b15610f56576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610fa65760018560000160086101000a81548160ff0219169083151502179055505b61101a6040518060400160405280601081526020017f44796e616d6963537667456d6f6a6973000000000000000000000000000000008152506040518060400160405280600581526020017f454d4f4a49000000000000000000000000000000000000000000000000000000815250612013565b611022612029565b61102b33612033565b611033612047565b66038d7ea4c680006001819055506000600660006101000a81548160ff02191690831515021790555083156110b85760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516110af9190614ab2565b60405180910390a15b5050505050565b6000806110ca612051565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6060600061110361189d565b9050806001018054611114906148be565b80601f0160208091040260200160405190810160405280929190818152602001828054611140906148be565b801561118d5780601f106111625761010080835404028352916020019161118d565b820191906000526020600020905b81548152906001019060200180831161117057829003601f168201915b505050505091505090565b60015481565b6111b06111a9611998565b8383612079565b5050565b610e9081565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6111fe8484846109d5565b61120a848484846121f7565b50505050565b6060600073ffffffffffffffffffffffffffffffffffffffff16611233836123ae565b73ffffffffffffffffffffffffffffffffffffffff1603611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090614b19565b60405180910390fd5b600061129483610d8f565b90506005600084815260200190815260200160002060009054906101000a900460ff1661134257734e401fcb736433733025FA7A725686c221FA6f53631115777084836040518363ffffffff1660e01b81526004016112f4929190614b57565b600060405180830381865af4158015611311573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061133a9190614c21565b915050611401565b734e401fcb736433733025FA7A725686c221FA6f53637af4732e84836002600088815260200190815260200160002060036000898152602001908152602001600020600460008a81526020019081526020016000206040518663ffffffff1660e01b81526004016113b7959493929190614f5c565b600060405180830381865af41580156113d4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113fd9190614c21565b9150505b919050565b60008061141161189d565b90508060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000610e90600054106114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e790615004565b60405180910390fd5b600154341015611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152c90615070565b60405180910390fd5b6103e86103ea60015461154891906150bf565b6115529190615130565b60018190555060008081548092919061156a90615161565b9190505550600660009054906101000a900460ff166115925761158b6123f9565b905061170d565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b81526004016116579594939291906151e6565b6020604051808303816000875af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a919061524e565b905060005460076000838152602001908152602001600020819055506116c233600054612579565b803373ffffffffffffffffffffffffffffffffffffffff167fc388c5a6c277eb0125a090abaa2e4f47d6c7394eacb52ad92653ebefc435d0a860405160405180910390a36000549150505b90565b611718611bf6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361178a5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117819190614343565b60405180910390fd5b61179381611f14565b50565b61179e611bf6565b80600660006101000a81548160ff02191690831515021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061188657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611896575061189582612597565b5b9050919050565b60007f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300905090565b6000806118d1836123ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361194457826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161193b91906142e7565b60405180910390fd5b80915050919050565b60008061195861189d565b905080600401600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600033905090565b6119ad8383836001612601565b505050565b60007f645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed00905090565b600263ffffffff1681511015611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c906152c7565b60405180910390fd5b600060076000848152602001908152602001600020549050611a4781836127d5565b611a518183612d95565b611a5b8183613307565b60016005600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508281611a92836123ae565b73ffffffffffffffffffffffffffffffffffffffff167ffc612aad4e70fb3e1d4832d8c65f92e4024aa87f809d131267a79bceee757f3360405160405180910390a4505050565b600080611ae7858585613476565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b2b57611b26846136a3565b611b6a565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b6957611b6881856136ff565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611bac57611ba784613879565b611beb565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611bea57611be98585613965565b5b5b809150509392505050565b611bfe611998565b73ffffffffffffffffffffffffffffffffffffffff16611c1c6110bf565b73ffffffffffffffffffffffffffffffffffffffff1614611c7b57611c3f611998565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611c729190614343565b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611d2a57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611d11613a01565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611d61576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611d6b611bf6565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611dd657506040513d601f19601f82011682018060405250810190611dd39190615313565b60015b611e1757816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611e0e9190614343565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611e7e57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611e7591906146eb565b60405180910390fd5b611e888383613a58565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611f12576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611f1e612051565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b61201b613acb565b6120258282613b0b565b5050565b612031613acb565b565b61203b613acb565b61204481613b48565b50565b61204f613acb565b565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600061208361189d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120f657826040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016120ed9190614343565b60405180910390fd5b818160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516121e991906141a8565b60405180910390a350505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156123a8578273ffffffffffffffffffffffffffffffffffffffff1663150b7a0261223b611998565b8685856040518563ffffffff1660e01b815260040161225d9493929190615395565b6020604051808303816000875af192505050801561229957506040513d601f19601f8201168201806040525081019061229691906153f6565b60015b61231d573d80600081146122c9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ce565b606091505b50600081510361231557836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161230c9190614343565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146123a657836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161239d9190614343565b60405180910390fd5b505b50505050565b6000806123b961189d565b905080600201600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600080600054905060006001436124109190615423565b409050600081306040516020016124289291906154c0565b604051602081830303815290604052805190602001209050600060024361244f9190615423565b409050600081306040516020016124679291906154c0565b6040516020818303038152906040528051906020012090506000600267ffffffffffffffff81111561249c5761249b6143cf565b5b6040519080825280602002602001820160405280156124ca5781602001602082028036833780820191505090505b5090508360001c816000815181106124e5576124e4614a2a565b5b6020026020010181815250508160001c8160018151811061250957612508614a2a565b5b60200260200101818152505061251f86826127d5565b6125298682612d95565b6125338682613307565b61253f33600054612579565b60016005600088815260200190815260200160002060006101000a81548160ff021916908315150217905550600054965050505050505090565b612593828260405180602001604052806000815250613bce565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600061260b61189d565b905081806126465750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561277a576000612656856118c5565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156126c157508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156126d457506126d28185611406565b155b1561271657836040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161270d9190614343565b60405180910390fd5b821561277857848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8481600401600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000604051806102a001604052806040518060400160405280600681526020017f666665343939000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f656164633961000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f663462353862000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666663613537000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666364333033000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f636336363030000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f626164373238000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f383264346236000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f363838616262000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f323838656437000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f353736626362000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f663033333436000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f346334643464000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f623531376137000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f653231643666000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666662336362000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f623466666164000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f373566666466000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f393964356666000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f633639656666000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666635373730000000000000000000000000000000000000000000000000000081525081525090506000601583600081518110612cd257612cd1614a2a565b5b6020026020010151612ce491906154ec565b90506000600584600181518110612cfe57612cfd614a2a565b5b6020026020010151612d1091906154ec565b90506040518060400160405280848460158110612d3057612d2f614a2a565b5b602002015181526020018260ff16815250600260008781526020019081526020016000206000820151816000019081612d6991906156aa565b5060208201518160010160006101000a81548160ff021916908360ff1602179055509050505050505050565b60405180604001604052806040518060800160405280602761ffff168152602001602761ffff16815260200161013261ffff16815260200161015461ffff1681525081526020016040518060800160405280602761ffff168152602001602761ffff1681526020016101e661ffff16815260200161015461ffff168152508152506003600084815260200190815260200160002060008201518160000160008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff16021790555060608201518160000160066101000a81548161ffff021916908361ffff160217905550505060208201518160010160008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff16021790555060608201518160000160066101000a81548161ffff021916908361ffff16021790555050509050506000605082600081518110612f7257612f71614a2a565b5b6020026020010151612f8491906154ec565b9050600061020883600181518110612f9f57612f9e614a2a565b5b6020026020010151612fb191906154ec565b90506000600382612fc291906154ec565b036130cc57601482612fd4919061577c565b6003600086815260200190815260200160002060000160000160006101000a81548161ffff021916908361ffff160217905550601482613014919061577c565b6003600086815260200190815260200160002060000160000160026101000a81548161ffff021916908361ffff160217905550608281613054919061577c565b6003600086815260200190815260200160002060000160000160046101000a81548161ffff021916908361ffff16021790555060b481613094919061577c565b6003600086815260200190815260200160002060000160000160066101000a81548161ffff021916908361ffff160217905550613301565b60016003826130db91906154ec565b036131e5576014826130ed919061577c565b6003600086815260200190815260200160002060010160000160006101000a81548161ffff021916908361ffff16021790555060148261312d919061577c565b6003600086815260200190815260200160002060010160000160026101000a81548161ffff021916908361ffff16021790555060828161316d919061577c565b6003600086815260200190815260200160002060010160000160046101000a81548161ffff021916908361ffff16021790555060b4816131ad919061577c565b6003600086815260200190815260200160002060010160000160066101000a81548161ffff021916908361ffff160217905550613300565b60006002836131f491906154ec565b0361327e57601482613206919061577c565b6003600086815260200190815260200160002060000160000160006101000a81548161ffff021916908361ffff160217905550601482613246919061577c565b6003600086815260200190815260200160002060000160000160026101000a81548161ffff021916908361ffff1602179055506132ff565b60148261328b919061577c565b6003600086815260200190815260200160002060010160000160006101000a81548161ffff021916908361ffff1602179055506014826132cb919061577c565b6003600086815260200190815260200160002060010160000160026101000a81548161ffff021916908361ffff1602179055505b5b5b50505050565b600060328260008151811061331f5761331e614a2a565b5b602002602001015161333191906154ec565b90506000600a60148460018151811061334d5761334c614a2a565b5b602002602001015161335f91906154ec565b613369919061577c565b9050600060b48460018151811061338357613382614a2a565b5b602002602001015161339591906154ec565b60b4856000815181106133ab576133aa614a2a565b5b60200260200101516133bd91906154ec565b6133c7919061577c565b905060405180606001604052808461ffff1681526020018361ffff1681526020018261ffff168152506004600087815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff1602179055509050505050505050565b60008061348161189d565b9050600061348e856123ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146134d0576134cf818587613bea565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461356357613512600086600080612601565b60018260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146135e85760018260030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8582600201600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480925050509392505050565b60006136ad6119b2565b9050806002018054905081600301600084815260200190815260200160002081905550806002018290806001815401808255809150506001900390600052602060002001600090919091909150555050565b60006137096119b2565b9050600061371684610da1565b905060008260010160008581526020019081526020016000205490508181146138035760008360000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050808460000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055508184600101600083815260200190815260200160002081905550505b826001016000858152602001908152602001600020600090558260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600090555050505050565b60006138836119b2565b905060006001826002018054905061389b9190615423565b9050600082600301600085815260200190815260200160002054905060008360020183815481106138cf576138ce614a2a565b5b90600052602060002001549050808460020183815481106138f3576138f2614a2a565b5b906000526020600020018190555081846003016000838152602001908152602001600020819055508360030160008681526020019081526020016000206000905583600201805480613948576139476157b0565b5b600190038181906000526020600020016000905590555050505050565b600061396f6119b2565b90506000600161397e85610da1565b6139889190615423565b9050828260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550808260010160008581526020019081526020016000208190555050505050565b6000613a2f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613cae565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b613a6182613cb8565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115613abe57613ab88282613d85565b50613ac7565b613ac6613e09565b5b5050565b613ad3613e46565b613b09576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613b13613acb565b6000613b1d61189d565b905082816000019081613b30919061583a565b5081816001019081613b42919061583a565b50505050565b613b50613acb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613bc25760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401613bb99190614343565b60405180910390fd5b613bcb81611f14565b50565b613bd88383613e66565b613be560008484846121f7565b505050565b613bf5838383613f5f565b613ca957600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613c6a57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401613c6191906142e7565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401613ca092919061494f565b60405180910390fd5b505050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03613d1457806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613d0b9190614343565b60405180910390fd5b80613d417f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613cae565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051613daf919061593d565b600060405180830381855af49150503d8060008114613dea576040519150601f19603f3d011682016040523d82523d6000602084013e613def565b606091505b5091509150613dff858383614020565b9250505092915050565b6000341115613e44576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000613e50611feb565b60000160089054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613ed85760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401613ecf9190614343565b60405180910390fd5b6000613ee683836000611ad9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613f5a5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401613f519190614343565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561401757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480613fd85750613fd78484611406565b5b8061401657508273ffffffffffffffffffffffffffffffffffffffff16613ffe8361194d565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b60608261403557614030826140af565b6140a7565b6000825114801561405d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561409f57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016140969190614343565b60405180910390fd5b8190506140a8565b5b9392505050565b6000815111156140c25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61413d81614108565b811461414857600080fd5b50565b60008135905061415a81614134565b92915050565b600060208284031215614176576141756140fe565b5b60006141848482850161414b565b91505092915050565b60008115159050919050565b6141a28161418d565b82525050565b60006020820190506141bd6000830184614199565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156141fd5780820151818401526020810190506141e2565b60008484015250505050565b6000601f19601f8301169050919050565b6000614225826141c3565b61422f81856141ce565b935061423f8185602086016141df565b61424881614209565b840191505092915050565b6000602082019050818103600083015261426d818461421a565b905092915050565b6000819050919050565b61428881614275565b811461429357600080fd5b50565b6000813590506142a58161427f565b92915050565b6000602082840312156142c1576142c06140fe565b5b60006142cf84828501614296565b91505092915050565b6142e181614275565b82525050565b60006020820190506142fc60008301846142d8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061432d82614302565b9050919050565b61433d81614322565b82525050565b60006020820190506143586000830184614334565b92915050565b61436781614322565b811461437257600080fd5b50565b6000813590506143848161435e565b92915050565b600080604083850312156143a1576143a06140fe565b5b60006143af85828601614375565b92505060206143c085828601614296565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61440782614209565b810181811067ffffffffffffffff82111715614426576144256143cf565b5b80604052505050565b60006144396140f4565b905061444582826143fe565b919050565b600067ffffffffffffffff821115614465576144646143cf565b5b602082029050602081019050919050565b600080fd5b600061448e6144898461444a565b61442f565b905080838252602082019050602084028301858111156144b1576144b0614476565b5b835b818110156144da57806144c68882614296565b8452602084019350506020810190506144b3565b5050509392505050565b600082601f8301126144f9576144f86143ca565b5b813561450984826020860161447b565b91505092915050565b60008060408385031215614529576145286140fe565b5b600061453785828601614296565b925050602083013567ffffffffffffffff81111561455857614557614103565b5b614564858286016144e4565b9150509250929050565b600080600060608486031215614587576145866140fe565b5b600061459586828701614375565b93505060206145a686828701614375565b92505060406145b786828701614296565b9150509250925092565b600080fd5b600067ffffffffffffffff8211156145e1576145e06143cf565b5b6145ea82614209565b9050602081019050919050565b82818337600083830152505050565b6000614619614614846145c6565b61442f565b905082815260208101848484011115614635576146346145c1565b5b6146408482856145f7565b509392505050565b600082601f83011261465d5761465c6143ca565b5b813561466d848260208601614606565b91505092915050565b6000806040838503121561468d5761468c6140fe565b5b600061469b85828601614375565b925050602083013567ffffffffffffffff8111156146bc576146bb614103565b5b6146c885828601614648565b9150509250929050565b6000819050919050565b6146e5816146d2565b82525050565b600060208201905061470060008301846146dc565b92915050565b60006020828403121561471c5761471b6140fe565b5b600061472a84828501614375565b91505092915050565b61473c8161418d565b811461474757600080fd5b50565b60008135905061475981614733565b92915050565b60008060408385031215614776576147756140fe565b5b600061478485828601614375565b92505060206147958582860161474a565b9150509250929050565b600080600080608085870312156147b9576147b86140fe565b5b60006147c787828801614375565b94505060206147d887828801614375565b93505060406147e987828801614296565b925050606085013567ffffffffffffffff81111561480a57614809614103565b5b61481687828801614648565b91505092959194509250565b60008060408385031215614839576148386140fe565b5b600061484785828601614375565b925050602061485885828601614375565b9150509250929050565b600060208284031215614878576148776140fe565b5b60006148868482850161474a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806148d657607f821691505b6020821081036148e9576148e861488f565b5b50919050565b60006040820190506149046000830185614334565b6149116020830184614334565b9392505050565b600060608201905061492d6000830186614334565b61493a60208301856142d8565b6149476040830184614334565b949350505050565b60006040820190506149646000830185614334565b61497160208301846142d8565b9392505050565b600081905092915050565b50565b6000614993600083614978565b915061499e82614983565b600082019050919050565b60006149b482614986565b9150819050919050565b7f5769746864726177206661696c65640000000000000000000000000000000000600082015250565b60006149f4600f836141ce565b91506149ff826149be565b602082019050919050565b60006020820190508181036000830152614a23816149e7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000614a9c614a97614a9284614a59565b614a77565b614a63565b9050919050565b614aac81614a81565b82525050565b6000602082019050614ac76000830184614aa3565b92915050565b7f6e6f742065786973740000000000000000000000000000000000000000000000600082015250565b6000614b036009836141ce565b9150614b0e82614acd565b602082019050919050565b60006020820190508181036000830152614b3281614af6565b9050919050565b614b4281614275565b82525050565b614b5181614322565b82525050565b6000604082019050614b6c6000830185614b39565b614b796020830184614b48565b9392505050565b600067ffffffffffffffff821115614b9b57614b9a6143cf565b5b614ba482614209565b9050602081019050919050565b6000614bc4614bbf84614b80565b61442f565b905082815260208101848484011115614be057614bdf6145c1565b5b614beb8482856141df565b509392505050565b600082601f830112614c0857614c076143ca565b5b8151614c18848260208601614bb1565b91505092915050565b600060208284031215614c3757614c366140fe565b5b600082015167ffffffffffffffff811115614c5557614c54614103565b5b614c6184828501614bf3565b91505092915050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008154614c9d816148be565b614ca78186614c6a565b94506001821660008114614cc25760018114614cd857614d0b565b60ff198316865281151560200286019350614d0b565b614ce185614c7b565b60005b83811015614d0357815481890152600182019150602081019050614ce4565b808801955050505b50505092915050565b60008160001c9050919050565b600060ff82169050919050565b6000614d41614d3c83614d14565b614d21565b9050919050565b600060ff82169050919050565b614d5e81614d48565b82525050565b60006040830160008084018583036000870152614d818382614c90565b92505060018401549050614d9481614d2e565b614da16020870182614d55565b50819250505092915050565b600061ffff82169050919050565b6000614dce614dc983614d14565b614dad565b9050919050565b600061ffff82169050919050565b614dec81614dd5565b82525050565b60008160101c9050919050565b6000614e12614e0d83614df2565b614dad565b9050919050565b60008160201c9050919050565b6000614e39614e3483614e19565b614dad565b9050919050565b60008160301c9050919050565b6000614e60614e5b83614e40565b614dad565b9050919050565b608082016000808301549050614e7c81614dbb565b614e896000860182614de3565b50614e9381614dff565b614ea06020860182614de3565b50614eaa81614e26565b614eb76040860182614de3565b50614ec181614e4d565b614ece6060860182614de3565b5050505050565b61010082016000808301614eec6000860182614e67565b5060018301614efe6080860182614e67565b5050505050565b606082016000808301549050614f1a81614dbb565b614f276000860182614de3565b50614f3181614dff565b614f3e6020860182614de3565b50614f4881614e26565b614f556040860182614de3565b5050505050565b60006101c082019050614f726000830188614b39565b614f7f6020830187614b48565b8181036040830152614f918186614d64565b9050614fa06060830185614ed5565b614fae610160830184614f05565b9695505050505050565b7f444f4e45204d494e54494e470000000000000000000000000000000000000000600082015250565b6000614fee600c836141ce565b9150614ff982614fb8565b602082019050919050565b6000602082019050818103600083015261501d81614fe1565b9050919050565b7f4e4f5420454e4f55474800000000000000000000000000000000000000000000600082015250565b600061505a600a836141ce565b915061506582615024565b602082019050919050565b600060208201905081810360008301526150898161504d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006150ca82614275565b91506150d583614275565b92508282026150e381614275565b915082820484148315176150fa576150f9615090565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061513b82614275565b915061514683614275565b92508261515657615155615101565b5b828204905092915050565b600061516c82614275565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361519e5761519d615090565b5b600182019050919050565b6151b281614a63565b82525050565b6151c181614dd5565b82525050565b600063ffffffff82169050919050565b6151e0816151c7565b82525050565b600060a0820190506151fb60008301886146dc565b61520860208301876151a9565b61521560408301866151b8565b61522260608301856151d7565b61522f60808301846151d7565b9695505050505050565b6000815190506152488161427f565b92915050565b600060208284031215615264576152636140fe565b5b600061527284828501615239565b91505092915050565b7f4e6f7420656e6f7567682072616e646f6d206e756d6265727300000000000000600082015250565b60006152b16019836141ce565b91506152bc8261527b565b602082019050919050565b600060208201905081810360008301526152e0816152a4565b9050919050565b6152f0816146d2565b81146152fb57600080fd5b50565b60008151905061530d816152e7565b92915050565b600060208284031215615329576153286140fe565b5b6000615337848285016152fe565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061536782615340565b615371818561534b565b93506153818185602086016141df565b61538a81614209565b840191505092915050565b60006080820190506153aa6000830187614334565b6153b76020830186614334565b6153c460408301856142d8565b81810360608301526153d6818461535c565b905095945050505050565b6000815190506153f081614134565b92915050565b60006020828403121561540c5761540b6140fe565b5b600061541a848285016153e1565b91505092915050565b600061542e82614275565b915061543983614275565b925082820390508181111561545157615450615090565b5b92915050565b6000819050919050565b61547261546d826146d2565b615457565b82525050565b60008160601b9050919050565b600061549082615478565b9050919050565b60006154a282615485565b9050919050565b6154ba6154b582614322565b615497565b82525050565b60006154cc8285615461565b6020820191506154dc82846154a9565b6014820191508190509392505050565b60006154f782614275565b915061550283614275565b92508261551257615511615101565b5b828206905092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261556a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261552d565b615574868361552d565b95508019841693508086168417925050509392505050565b60006155a76155a261559d84614275565b614a77565b614275565b9050919050565b6000819050919050565b6155c18361558c565b6155d56155cd826155ae565b84845461553a565b825550505050565b600090565b6155ea6155dd565b6155f58184846155b8565b505050565b5b818110156156195761560e6000826155e2565b6001810190506155fb565b5050565b601f82111561565e5761562f81614c7b565b6156388461551d565b81016020851015615647578190505b61565b6156538561551d565b8301826155fa565b50505b505050565b600082821c905092915050565b600061568160001984600802615663565b1980831691505092915050565b600061569a8383615670565b9150826002028217905092915050565b6156b382615340565b67ffffffffffffffff8111156156cc576156cb6143cf565b5b6156d682546148be565b6156e182828561561d565b600060209050601f8311600181146157145760008415615702578287015190505b61570c858261568e565b865550615774565b601f19841661572286614c7b565b60005b8281101561574a57848901518255600182019150602085019450602081019050615725565b868310156157675784890151615763601f891682615670565b8355505b6001600288020188555050505b505050505050565b600061578782614275565b915061579283614275565b92508282019050808211156157aa576157a9615090565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008190508160005260206000209050919050565b601f82111561583557615806816157df565b61580f8461551d565b8101602085101561581e578190505b61583261582a8561551d565b8301826155fa565b50505b505050565b615843826141c3565b67ffffffffffffffff81111561585c5761585b6143cf565b5b61586682546148be565b6158718282856157f4565b600060209050601f8311600181146158a45760008415615892578287015190505b61589c858261568e565b865550615904565b601f1984166158b2866157df565b60005b828110156158da578489015182556001820191506020850194506020810190506158b5565b868310156158f757848901516158f3601f891682615670565b8355505b6001600288020188555050505b505050505050565b600061591782615340565b6159218185614978565b93506159318185602086016141df565b80840191505092915050565b6000615949828461590c565b91508190509291505056fea2646970667358221220acf369dec9ad262e2ba106a6fbc064fc0739bde6a3bdbd5c2da224c43186a4c364736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c806370a0823111610102578063a4d66daf11610095578063e985e9c511610064578063e985e9c5146106d5578063eb93406b14610712578063f2fde38b14610730578063f877a8af14610759576101e3565b8063a4d66daf14610619578063ad3cb1cc14610644578063b88d4fde1461066f578063c87b56dd14610698576101e3565b80638da5cb5b116100d15780638da5cb5b1461056f57806395d89b411461059a578063a035b1fe146105c5578063a22cb465146105f0576101e3565b806370a08231146104d9578063715018a6146105165780637165485d1461052d5780638129fc1c14610558576101e3565b806323b872dd1161017a5780634f1ef286116101495780634f1ef286146104185780634f6ccce71461043457806352d1902d146104715780636352211e1461049c576101e3565b806323b872dd146103725780632f745c591461039b5780633ccfd60b146103d857806342842e0e146103ef576101e3565b8063081812fc116101b6578063081812fc146102b8578063095ea7b3146102f557806318160ddd1461031e5780631fe543e314610349576101e3565b806301ffc9a7146101e8578063060383411461022557806306fdde03146102505780630750b1631461027b575b600080fd5b3480156101f457600080fd5b5061020f600480360381019061020a9190614160565b610782565b60405161021c91906141a8565b60405180910390f35b34801561023157600080fd5b5061023a6107fc565b60405161024791906141a8565b60405180910390f35b34801561025c57600080fd5b5061026561080f565b6040516102729190614253565b60405180910390f35b34801561028757600080fd5b506102a2600480360381019061029d91906142ab565b6108b0565b6040516102af91906142e7565b60405180910390f35b3480156102c457600080fd5b506102df60048036038101906102da91906142ab565b6108c8565b6040516102ec9190614343565b60405180910390f35b34801561030157600080fd5b5061031c6004803603810190610317919061438a565b6108e4565b005b34801561032a57600080fd5b506103336108fa565b60405161034091906142e7565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190614512565b610915565b005b34801561037e57600080fd5b506103996004803603810190610394919061456e565b6109d5565b005b3480156103a757600080fd5b506103c260048036038101906103bd919061438a565b610ad7565b6040516103cf91906142e7565b60405180910390f35b3480156103e457600080fd5b506103ed610b8e565b005b3480156103fb57600080fd5b506104166004803603810190610411919061456e565b610c99565b005b610432600480360381019061042d9190614676565b610cb9565b005b34801561044057600080fd5b5061045b600480360381019061045691906142ab565b610cd8565b60405161046891906142e7565b60405180910390f35b34801561047d57600080fd5b50610486610d5c565b60405161049391906146eb565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be91906142ab565b610d8f565b6040516104d09190614343565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb9190614706565b610da1565b60405161050d91906142e7565b60405180910390f35b34801561052257600080fd5b5061052b610e6a565b005b34801561053957600080fd5b50610542610e7e565b60405161054f91906142e7565b60405180910390f35b34801561056457600080fd5b5061056d610e84565b005b34801561057b57600080fd5b506105846110bf565b6040516105919190614343565b60405180910390f35b3480156105a657600080fd5b506105af6110f7565b6040516105bc9190614253565b60405180910390f35b3480156105d157600080fd5b506105da611198565b6040516105e791906142e7565b60405180910390f35b3480156105fc57600080fd5b506106176004803603810190610612919061475f565b61119e565b005b34801561062557600080fd5b5061062e6111b4565b60405161063b91906142e7565b60405180910390f35b34801561065057600080fd5b506106596111ba565b6040516106669190614253565b60405180910390f35b34801561067b57600080fd5b506106966004803603810190610691919061479f565b6111f3565b005b3480156106a457600080fd5b506106bf60048036038101906106ba91906142ab565b611210565b6040516106cc9190614253565b60405180910390f35b3480156106e157600080fd5b506106fc60048036038101906106f79190614822565b611406565b60405161070991906141a8565b60405180910390f35b61071a6114a8565b60405161072791906142e7565b60405180910390f35b34801561073c57600080fd5b5061075760048036038101906107529190614706565b611710565b005b34801561076557600080fd5b50610780600480360381019061077b9190614862565b611796565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107f557506107f4826117bb565b5b9050919050565b600660009054906101000a900460ff1681565b6060600061081b61189d565b905080600001805461082c906148be565b80601f0160208091040260200160405190810160405280929190818152602001828054610858906148be565b80156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b505050505091505090565b60076020528060005260406000206000915090505481565b60006108d3826118c5565b506108dd8261194d565b9050919050565b6108f682826108f1611998565b6119a0565b5050565b6000806109056119b2565b9050806002018054905091505090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109c757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016109be9291906148ef565b60405180910390fd5b6109d182826119da565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a475760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401610a3e9190614343565b60405180910390fd5b6000610a5b8383610a56611998565b611ad9565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ad1578382826040517f64283d7b000000000000000000000000000000000000000000000000000000008152600401610ac893929190614918565b60405180910390fd5b50505050565b600080610ae26119b2565b9050610aed84610da1565b8310610b325783836040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610b2992919061494f565b60405180910390fd5b8060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000205491505092915050565b610b96611bf6565b600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051610bc1906149a9565b60006040518083038185875af1925050503d8060008114610bfe576040519150601f19603f3d011682016040523d82523d6000602084013e610c03565b606091505b5050905080610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90614a0a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436483604051610c8d91906142e7565b60405180910390a25050565b610cb4838383604051806020016040528060008152506111f3565b505050565b610cc1611c7d565b610cca82611d63565b610cd48282611d6e565b5050565b600080610ce36119b2565b9050610ced6108fa565b8310610d33576000836040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610d2a92919061494f565b60405180910390fd5b806002018381548110610d4957610d48614a2a565b5b9060005260206000200154915050919050565b6000610d66611e8d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b6000610d9a826118c5565b9050919050565b600080610dac61189d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610e205760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610e179190614343565b60405180910390fd5b8060030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b610e72611bf6565b610e7c6000611f14565b565b6103ea81565b6000610e8e611feb565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610edc5750825b9050600060018367ffffffffffffffff16148015610f11575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610f1f575080155b15610f56576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610fa65760018560000160086101000a81548160ff0219169083151502179055505b61101a6040518060400160405280601081526020017f44796e616d6963537667456d6f6a6973000000000000000000000000000000008152506040518060400160405280600581526020017f454d4f4a49000000000000000000000000000000000000000000000000000000815250612013565b611022612029565b61102b33612033565b611033612047565b66038d7ea4c680006001819055506000600660006101000a81548160ff02191690831515021790555083156110b85760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d260016040516110af9190614ab2565b60405180910390a15b5050505050565b6000806110ca612051565b90508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691505090565b6060600061110361189d565b9050806001018054611114906148be565b80601f0160208091040260200160405190810160405280929190818152602001828054611140906148be565b801561118d5780601f106111625761010080835404028352916020019161118d565b820191906000526020600020905b81548152906001019060200180831161117057829003601f168201915b505050505091505090565b60015481565b6111b06111a9611998565b8383612079565b5050565b610e9081565b6040518060400160405280600581526020017f352e302e3000000000000000000000000000000000000000000000000000000081525081565b6111fe8484846109d5565b61120a848484846121f7565b50505050565b6060600073ffffffffffffffffffffffffffffffffffffffff16611233836123ae565b73ffffffffffffffffffffffffffffffffffffffff1603611289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128090614b19565b60405180910390fd5b600061129483610d8f565b90506005600084815260200190815260200160002060009054906101000a900460ff166113425773__$32fa6a3b9a722542ba964e575c4cd0333d$__631115777084836040518363ffffffff1660e01b81526004016112f4929190614b57565b600060405180830381865af4158015611311573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061133a9190614c21565b915050611401565b73__$32fa6a3b9a722542ba964e575c4cd0333d$__637af4732e84836002600088815260200190815260200160002060036000898152602001908152602001600020600460008a81526020019081526020016000206040518663ffffffff1660e01b81526004016113b7959493929190614f5c565b600060405180830381865af41580156113d4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113fd9190614c21565b9150505b919050565b60008061141161189d565b90508060050160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000610e90600054106114f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e790615004565b60405180910390fd5b600154341015611535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152c90615070565b60405180910390fd5b6103e86103ea60015461154891906150bf565b6115529190615130565b60018190555060008081548092919061156a90615161565b9190505550600660009054906101000a900460ff166115925761158b6123f9565b905061170d565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060026040518663ffffffff1660e01b81526004016116579594939291906151e6565b6020604051808303816000875af1158015611676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169a919061524e565b905060005460076000838152602001908152602001600020819055506116c233600054612579565b803373ffffffffffffffffffffffffffffffffffffffff167fc388c5a6c277eb0125a090abaa2e4f47d6c7394eacb52ad92653ebefc435d0a860405160405180910390a36000549150505b90565b611718611bf6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361178a5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016117819190614343565b60405180910390fd5b61179381611f14565b50565b61179e611bf6565b80600660006101000a81548160ff02191690831515021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061188657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611896575061189582612597565b5b9050919050565b60007f80bb2b638cc20bc4d0a60d66940f3ab4a00c1d7b313497ca82fb0b4ab0079300905090565b6000806118d1836123ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361194457826040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161193b91906142e7565b60405180910390fd5b80915050919050565b60008061195861189d565b905080600401600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600033905090565b6119ad8383836001612601565b505050565b60007f645e039705490088daad89bae25049a34f4a9072d398537b1ab2425f24cbed00905090565b600263ffffffff1681511015611a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1c906152c7565b60405180910390fd5b600060076000848152602001908152602001600020549050611a4781836127d5565b611a518183612d95565b611a5b8183613307565b60016005600083815260200190815260200160002060006101000a81548160ff0219169083151502179055508281611a92836123ae565b73ffffffffffffffffffffffffffffffffffffffff167ffc612aad4e70fb3e1d4832d8c65f92e4024aa87f809d131267a79bceee757f3360405160405180910390a4505050565b600080611ae7858585613476565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b2b57611b26846136a3565b611b6a565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611b6957611b6881856136ff565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603611bac57611ba784613879565b611beb565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611bea57611be98585613965565b5b5b809150509392505050565b611bfe611998565b73ffffffffffffffffffffffffffffffffffffffff16611c1c6110bf565b73ffffffffffffffffffffffffffffffffffffffff1614611c7b57611c3f611998565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611c729190614343565b60405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161480611d2a57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16611d11613a01565b73ffffffffffffffffffffffffffffffffffffffff1614155b15611d61576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b611d6b611bf6565b50565b8173ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611dd657506040513d601f19601f82011682018060405250810190611dd39190615313565b60015b611e1757816040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401611e0e9190614343565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114611e7e57806040517faa1d49a4000000000000000000000000000000000000000000000000000000008152600401611e7591906146eb565b60405180910390fd5b611e888383613a58565b505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614611f12576040517fe07c8dba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000611f1e612051565b905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050828260000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3505050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b61201b613acb565b6120258282613b0b565b5050565b612031613acb565b565b61203b613acb565b61204481613b48565b50565b61204f613acb565b565b60007f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300905090565b600061208361189d565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120f657826040517f5b08ba180000000000000000000000000000000000000000000000000000000081526004016120ed9190614343565b60405180910390fd5b818160050160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31846040516121e991906141a8565b60405180910390a350505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b11156123a8578273ffffffffffffffffffffffffffffffffffffffff1663150b7a0261223b611998565b8685856040518563ffffffff1660e01b815260040161225d9493929190615395565b6020604051808303816000875af192505050801561229957506040513d601f19601f8201168201806040525081019061229691906153f6565b60015b61231d573d80600081146122c9576040519150601f19603f3d011682016040523d82523d6000602084013e6122ce565b606091505b50600081510361231557836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161230c9190614343565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146123a657836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161239d9190614343565b60405180910390fd5b505b50505050565b6000806123b961189d565b905080600201600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b600080600054905060006001436124109190615423565b409050600081306040516020016124289291906154c0565b604051602081830303815290604052805190602001209050600060024361244f9190615423565b409050600081306040516020016124679291906154c0565b6040516020818303038152906040528051906020012090506000600267ffffffffffffffff81111561249c5761249b6143cf565b5b6040519080825280602002602001820160405280156124ca5781602001602082028036833780820191505090505b5090508360001c816000815181106124e5576124e4614a2a565b5b6020026020010181815250508160001c8160018151811061250957612508614a2a565b5b60200260200101818152505061251f86826127d5565b6125298682612d95565b6125338682613307565b61253f33600054612579565b60016005600088815260200190815260200160002060006101000a81548160ff021916908315150217905550600054965050505050505090565b612593828260405180602001604052806000815250613bce565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600061260b61189d565b905081806126465750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561277a576000612656856118c5565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580156126c157508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156126d457506126d28185611406565b155b1561271657836040517fa9fbf51f00000000000000000000000000000000000000000000000000000000815260040161270d9190614343565b60405180910390fd5b821561277857848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b8481600401600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b6000604051806102a001604052806040518060400160405280600681526020017f666665343939000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f656164633961000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f663462353862000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666663613537000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666364333033000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f636336363030000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f626164373238000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f383264346236000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f363838616262000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f323838656437000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f353736626362000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f663033333436000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f346334643464000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f623531376137000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f653231643666000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666662336362000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f623466666164000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f373566666466000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f393964356666000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f633639656666000000000000000000000000000000000000000000000000000081525081526020016040518060400160405280600681526020017f666635373730000000000000000000000000000000000000000000000000000081525081525090506000601583600081518110612cd257612cd1614a2a565b5b6020026020010151612ce491906154ec565b90506000600584600181518110612cfe57612cfd614a2a565b5b6020026020010151612d1091906154ec565b90506040518060400160405280848460158110612d3057612d2f614a2a565b5b602002015181526020018260ff16815250600260008781526020019081526020016000206000820151816000019081612d6991906156aa565b5060208201518160010160006101000a81548160ff021916908360ff1602179055509050505050505050565b60405180604001604052806040518060800160405280602761ffff168152602001602761ffff16815260200161013261ffff16815260200161015461ffff1681525081526020016040518060800160405280602761ffff168152602001602761ffff1681526020016101e661ffff16815260200161015461ffff168152508152506003600084815260200190815260200160002060008201518160000160008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff16021790555060608201518160000160066101000a81548161ffff021916908361ffff160217905550505060208201518160010160008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff16021790555060608201518160000160066101000a81548161ffff021916908361ffff16021790555050509050506000605082600081518110612f7257612f71614a2a565b5b6020026020010151612f8491906154ec565b9050600061020883600181518110612f9f57612f9e614a2a565b5b6020026020010151612fb191906154ec565b90506000600382612fc291906154ec565b036130cc57601482612fd4919061577c565b6003600086815260200190815260200160002060000160000160006101000a81548161ffff021916908361ffff160217905550601482613014919061577c565b6003600086815260200190815260200160002060000160000160026101000a81548161ffff021916908361ffff160217905550608281613054919061577c565b6003600086815260200190815260200160002060000160000160046101000a81548161ffff021916908361ffff16021790555060b481613094919061577c565b6003600086815260200190815260200160002060000160000160066101000a81548161ffff021916908361ffff160217905550613301565b60016003826130db91906154ec565b036131e5576014826130ed919061577c565b6003600086815260200190815260200160002060010160000160006101000a81548161ffff021916908361ffff16021790555060148261312d919061577c565b6003600086815260200190815260200160002060010160000160026101000a81548161ffff021916908361ffff16021790555060828161316d919061577c565b6003600086815260200190815260200160002060010160000160046101000a81548161ffff021916908361ffff16021790555060b4816131ad919061577c565b6003600086815260200190815260200160002060010160000160066101000a81548161ffff021916908361ffff160217905550613300565b60006002836131f491906154ec565b0361327e57601482613206919061577c565b6003600086815260200190815260200160002060000160000160006101000a81548161ffff021916908361ffff160217905550601482613246919061577c565b6003600086815260200190815260200160002060000160000160026101000a81548161ffff021916908361ffff1602179055506132ff565b60148261328b919061577c565b6003600086815260200190815260200160002060010160000160006101000a81548161ffff021916908361ffff1602179055506014826132cb919061577c565b6003600086815260200190815260200160002060010160000160026101000a81548161ffff021916908361ffff1602179055505b5b5b50505050565b600060328260008151811061331f5761331e614a2a565b5b602002602001015161333191906154ec565b90506000600a60148460018151811061334d5761334c614a2a565b5b602002602001015161335f91906154ec565b613369919061577c565b9050600060b48460018151811061338357613382614a2a565b5b602002602001015161339591906154ec565b60b4856000815181106133ab576133aa614a2a565b5b60200260200101516133bd91906154ec565b6133c7919061577c565b905060405180606001604052808461ffff1681526020018361ffff1681526020018261ffff168152506004600087815260200190815260200160002060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548161ffff021916908361ffff16021790555060408201518160000160046101000a81548161ffff021916908361ffff1602179055509050505050505050565b60008061348161189d565b9050600061348e856123ae565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146134d0576134cf818587613bea565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461356357613512600086600080612601565b60018260030160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146135e85760018260030160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8582600201600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a480925050509392505050565b60006136ad6119b2565b9050806002018054905081600301600084815260200190815260200160002081905550806002018290806001815401808255809150506001900390600052602060002001600090919091909150555050565b60006137096119b2565b9050600061371684610da1565b905060008260010160008581526020019081526020016000205490508181146138035760008360000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020549050808460000160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000848152602001908152602001600020819055508184600101600083815260200190815260200160002081905550505b826001016000858152602001908152602001600020600090558260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000838152602001908152602001600020600090555050505050565b60006138836119b2565b905060006001826002018054905061389b9190615423565b9050600082600301600085815260200190815260200160002054905060008360020183815481106138cf576138ce614a2a565b5b90600052602060002001549050808460020183815481106138f3576138f2614a2a565b5b906000526020600020018190555081846003016000838152602001908152602001600020819055508360030160008681526020019081526020016000206000905583600201805480613948576139476157b0565b5b600190038181906000526020600020016000905590555050505050565b600061396f6119b2565b90506000600161397e85610da1565b6139889190615423565b9050828260000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550808260010160008581526020019081526020016000208190555050505050565b6000613a2f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613cae565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b613a6182613cb8565b8173ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a2600081511115613abe57613ab88282613d85565b50613ac7565b613ac6613e09565b5b5050565b613ad3613e46565b613b09576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b613b13613acb565b6000613b1d61189d565b905082816000019081613b30919061583a565b5081816001019081613b42919061583a565b50505050565b613b50613acb565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613bc25760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401613bb99190614343565b60405180910390fd5b613bcb81611f14565b50565b613bd88383613e66565b613be560008484846121f7565b505050565b613bf5838383613f5f565b613ca957600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603613c6a57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401613c6191906142e7565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401613ca092919061494f565b60405180910390fd5b505050565b6000819050919050565b60008173ffffffffffffffffffffffffffffffffffffffff163b03613d1457806040517f4c9c8ce3000000000000000000000000000000000000000000000000000000008152600401613d0b9190614343565b60405180910390fd5b80613d417f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613cae565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808473ffffffffffffffffffffffffffffffffffffffff1684604051613daf919061593d565b600060405180830381855af49150503d8060008114613dea576040519150601f19603f3d011682016040523d82523d6000602084013e613def565b606091505b5091509150613dff858383614020565b9250505092915050565b6000341115613e44576040517fb398979f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6000613e50611feb565b60000160089054906101000a900460ff16905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613ed85760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401613ecf9190614343565b60405180910390fd5b6000613ee683836000611ad9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613f5a5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401613f519190614343565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561401757508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480613fd85750613fd78484611406565b5b8061401657508273ffffffffffffffffffffffffffffffffffffffff16613ffe8361194d565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b60608261403557614030826140af565b6140a7565b6000825114801561405d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561409f57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016140969190614343565b60405180910390fd5b8190506140a8565b5b9392505050565b6000815111156140c25780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61413d81614108565b811461414857600080fd5b50565b60008135905061415a81614134565b92915050565b600060208284031215614176576141756140fe565b5b60006141848482850161414b565b91505092915050565b60008115159050919050565b6141a28161418d565b82525050565b60006020820190506141bd6000830184614199565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156141fd5780820151818401526020810190506141e2565b60008484015250505050565b6000601f19601f8301169050919050565b6000614225826141c3565b61422f81856141ce565b935061423f8185602086016141df565b61424881614209565b840191505092915050565b6000602082019050818103600083015261426d818461421a565b905092915050565b6000819050919050565b61428881614275565b811461429357600080fd5b50565b6000813590506142a58161427f565b92915050565b6000602082840312156142c1576142c06140fe565b5b60006142cf84828501614296565b91505092915050565b6142e181614275565b82525050565b60006020820190506142fc60008301846142d8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061432d82614302565b9050919050565b61433d81614322565b82525050565b60006020820190506143586000830184614334565b92915050565b61436781614322565b811461437257600080fd5b50565b6000813590506143848161435e565b92915050565b600080604083850312156143a1576143a06140fe565b5b60006143af85828601614375565b92505060206143c085828601614296565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61440782614209565b810181811067ffffffffffffffff82111715614426576144256143cf565b5b80604052505050565b60006144396140f4565b905061444582826143fe565b919050565b600067ffffffffffffffff821115614465576144646143cf565b5b602082029050602081019050919050565b600080fd5b600061448e6144898461444a565b61442f565b905080838252602082019050602084028301858111156144b1576144b0614476565b5b835b818110156144da57806144c68882614296565b8452602084019350506020810190506144b3565b5050509392505050565b600082601f8301126144f9576144f86143ca565b5b813561450984826020860161447b565b91505092915050565b60008060408385031215614529576145286140fe565b5b600061453785828601614296565b925050602083013567ffffffffffffffff81111561455857614557614103565b5b614564858286016144e4565b9150509250929050565b600080600060608486031215614587576145866140fe565b5b600061459586828701614375565b93505060206145a686828701614375565b92505060406145b786828701614296565b9150509250925092565b600080fd5b600067ffffffffffffffff8211156145e1576145e06143cf565b5b6145ea82614209565b9050602081019050919050565b82818337600083830152505050565b6000614619614614846145c6565b61442f565b905082815260208101848484011115614635576146346145c1565b5b6146408482856145f7565b509392505050565b600082601f83011261465d5761465c6143ca565b5b813561466d848260208601614606565b91505092915050565b6000806040838503121561468d5761468c6140fe565b5b600061469b85828601614375565b925050602083013567ffffffffffffffff8111156146bc576146bb614103565b5b6146c885828601614648565b9150509250929050565b6000819050919050565b6146e5816146d2565b82525050565b600060208201905061470060008301846146dc565b92915050565b60006020828403121561471c5761471b6140fe565b5b600061472a84828501614375565b91505092915050565b61473c8161418d565b811461474757600080fd5b50565b60008135905061475981614733565b92915050565b60008060408385031215614776576147756140fe565b5b600061478485828601614375565b92505060206147958582860161474a565b9150509250929050565b600080600080608085870312156147b9576147b86140fe565b5b60006147c787828801614375565b94505060206147d887828801614375565b93505060406147e987828801614296565b925050606085013567ffffffffffffffff81111561480a57614809614103565b5b61481687828801614648565b91505092959194509250565b60008060408385031215614839576148386140fe565b5b600061484785828601614375565b925050602061485885828601614375565b9150509250929050565b600060208284031215614878576148776140fe565b5b60006148868482850161474a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806148d657607f821691505b6020821081036148e9576148e861488f565b5b50919050565b60006040820190506149046000830185614334565b6149116020830184614334565b9392505050565b600060608201905061492d6000830186614334565b61493a60208301856142d8565b6149476040830184614334565b949350505050565b60006040820190506149646000830185614334565b61497160208301846142d8565b9392505050565b600081905092915050565b50565b6000614993600083614978565b915061499e82614983565b600082019050919050565b60006149b482614986565b9150819050919050565b7f5769746864726177206661696c65640000000000000000000000000000000000600082015250565b60006149f4600f836141ce565b91506149ff826149be565b602082019050919050565b60006020820190508181036000830152614a23816149e7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b6000614a9c614a97614a9284614a59565b614a77565b614a63565b9050919050565b614aac81614a81565b82525050565b6000602082019050614ac76000830184614aa3565b92915050565b7f6e6f742065786973740000000000000000000000000000000000000000000000600082015250565b6000614b036009836141ce565b9150614b0e82614acd565b602082019050919050565b60006020820190508181036000830152614b3281614af6565b9050919050565b614b4281614275565b82525050565b614b5181614322565b82525050565b6000604082019050614b6c6000830185614b39565b614b796020830184614b48565b9392505050565b600067ffffffffffffffff821115614b9b57614b9a6143cf565b5b614ba482614209565b9050602081019050919050565b6000614bc4614bbf84614b80565b61442f565b905082815260208101848484011115614be057614bdf6145c1565b5b614beb8482856141df565b509392505050565b600082601f830112614c0857614c076143ca565b5b8151614c18848260208601614bb1565b91505092915050565b600060208284031215614c3757614c366140fe565b5b600082015167ffffffffffffffff811115614c5557614c54614103565b5b614c6184828501614bf3565b91505092915050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b60008154614c9d816148be565b614ca78186614c6a565b94506001821660008114614cc25760018114614cd857614d0b565b60ff198316865281151560200286019350614d0b565b614ce185614c7b565b60005b83811015614d0357815481890152600182019150602081019050614ce4565b808801955050505b50505092915050565b60008160001c9050919050565b600060ff82169050919050565b6000614d41614d3c83614d14565b614d21565b9050919050565b600060ff82169050919050565b614d5e81614d48565b82525050565b60006040830160008084018583036000870152614d818382614c90565b92505060018401549050614d9481614d2e565b614da16020870182614d55565b50819250505092915050565b600061ffff82169050919050565b6000614dce614dc983614d14565b614dad565b9050919050565b600061ffff82169050919050565b614dec81614dd5565b82525050565b60008160101c9050919050565b6000614e12614e0d83614df2565b614dad565b9050919050565b60008160201c9050919050565b6000614e39614e3483614e19565b614dad565b9050919050565b60008160301c9050919050565b6000614e60614e5b83614e40565b614dad565b9050919050565b608082016000808301549050614e7c81614dbb565b614e896000860182614de3565b50614e9381614dff565b614ea06020860182614de3565b50614eaa81614e26565b614eb76040860182614de3565b50614ec181614e4d565b614ece6060860182614de3565b5050505050565b61010082016000808301614eec6000860182614e67565b5060018301614efe6080860182614e67565b5050505050565b606082016000808301549050614f1a81614dbb565b614f276000860182614de3565b50614f3181614dff565b614f3e6020860182614de3565b50614f4881614e26565b614f556040860182614de3565b5050505050565b60006101c082019050614f726000830188614b39565b614f7f6020830187614b48565b8181036040830152614f918186614d64565b9050614fa06060830185614ed5565b614fae610160830184614f05565b9695505050505050565b7f444f4e45204d494e54494e470000000000000000000000000000000000000000600082015250565b6000614fee600c836141ce565b9150614ff982614fb8565b602082019050919050565b6000602082019050818103600083015261501d81614fe1565b9050919050565b7f4e4f5420454e4f55474800000000000000000000000000000000000000000000600082015250565b600061505a600a836141ce565b915061506582615024565b602082019050919050565b600060208201905081810360008301526150898161504d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006150ca82614275565b91506150d583614275565b92508282026150e381614275565b915082820484148315176150fa576150f9615090565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061513b82614275565b915061514683614275565b92508261515657615155615101565b5b828204905092915050565b600061516c82614275565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361519e5761519d615090565b5b600182019050919050565b6151b281614a63565b82525050565b6151c181614dd5565b82525050565b600063ffffffff82169050919050565b6151e0816151c7565b82525050565b600060a0820190506151fb60008301886146dc565b61520860208301876151a9565b61521560408301866151b8565b61522260608301856151d7565b61522f60808301846151d7565b9695505050505050565b6000815190506152488161427f565b92915050565b600060208284031215615264576152636140fe565b5b600061527284828501615239565b91505092915050565b7f4e6f7420656e6f7567682072616e646f6d206e756d6265727300000000000000600082015250565b60006152b16019836141ce565b91506152bc8261527b565b602082019050919050565b600060208201905081810360008301526152e0816152a4565b9050919050565b6152f0816146d2565b81146152fb57600080fd5b50565b60008151905061530d816152e7565b92915050565b600060208284031215615329576153286140fe565b5b6000615337848285016152fe565b91505092915050565b600081519050919050565b600082825260208201905092915050565b600061536782615340565b615371818561534b565b93506153818185602086016141df565b61538a81614209565b840191505092915050565b60006080820190506153aa6000830187614334565b6153b76020830186614334565b6153c460408301856142d8565b81810360608301526153d6818461535c565b905095945050505050565b6000815190506153f081614134565b92915050565b60006020828403121561540c5761540b6140fe565b5b600061541a848285016153e1565b91505092915050565b600061542e82614275565b915061543983614275565b925082820390508181111561545157615450615090565b5b92915050565b6000819050919050565b61547261546d826146d2565b615457565b82525050565b60008160601b9050919050565b600061549082615478565b9050919050565b60006154a282615485565b9050919050565b6154ba6154b582614322565b615497565b82525050565b60006154cc8285615461565b6020820191506154dc82846154a9565b6014820191508190509392505050565b60006154f782614275565b915061550283614275565b92508261551257615511615101565b5b828206905092915050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261556a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261552d565b615574868361552d565b95508019841693508086168417925050509392505050565b60006155a76155a261559d84614275565b614a77565b614275565b9050919050565b6000819050919050565b6155c18361558c565b6155d56155cd826155ae565b84845461553a565b825550505050565b600090565b6155ea6155dd565b6155f58184846155b8565b505050565b5b818110156156195761560e6000826155e2565b6001810190506155fb565b5050565b601f82111561565e5761562f81614c7b565b6156388461551d565b81016020851015615647578190505b61565b6156538561551d565b8301826155fa565b50505b505050565b600082821c905092915050565b600061568160001984600802615663565b1980831691505092915050565b600061569a8383615670565b9150826002028217905092915050565b6156b382615340565b67ffffffffffffffff8111156156cc576156cb6143cf565b5b6156d682546148be565b6156e182828561561d565b600060209050601f8311600181146157145760008415615702578287015190505b61570c858261568e565b865550615774565b601f19841661572286614c7b565b60005b8281101561574a57848901518255600182019150602085019450602081019050615725565b868310156157675784890151615763601f891682615670565b8355505b6001600288020188555050505b505050505050565b600061578782614275565b915061579283614275565b92508282019050808211156157aa576157a9615090565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008190508160005260206000209050919050565b601f82111561583557615806816157df565b61580f8461551d565b8101602085101561581e578190505b61583261582a8561551d565b8301826155fa565b50505b505050565b615843826141c3565b67ffffffffffffffff81111561585c5761585b6143cf565b5b61586682546148be565b6158718282856157f4565b600060209050601f8311600181146158a45760008415615892578287015190505b61589c858261568e565b865550615904565b601f1984166158b2866157df565b60005b828110156158da578489015182556001820191506020850194506020810190506158b5565b868310156158f757848901516158f3601f891682615670565b8355505b6001600288020188555050505b505050505050565b600061591782615340565b6159218185614978565b93506159318185602086016141df565b80840191505092915050565b6000615949828461590c565b91508190509291505056fea2646970667358221220acf369dec9ad262e2ba106a6fbc064fc0739bde6a3bdbd5c2da224c43186a4c364736f6c63430008140033",
  "libraries": {
    "SvgEmoji": "0x4e401fcb736433733025FA7A725686c221FA6f53"
  },
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "ERC721EnumerableForbiddenBatchMint()": [
        {
          "details": "Batch mint is not allowed."
        }
      ],
      "ERC721IncorrectOwner(address,uint256,address)": [
        {
          "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
          "params": {
            "owner": "Address of the current owner of a token.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InsufficientApproval(address,uint256)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC721InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC721InvalidOwner(address)": [
        {
          "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
          "params": {
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "ERC721InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC721InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC721NonexistentToken(uint256)": [
        {
          "details": "Indicates a `tokenId` whose `owner` is the zero address.",
          "params": {
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC721OutOfBoundsIndex(address,uint256)": [
        {
          "details": "An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6397,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "_tokenIds",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 6405,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "price",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6410,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "headMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(HeadInfo)5131_storage)"
      },
      {
        "astId": 6415,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "eyesMap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(EyesInfo)5138_storage)"
      },
      {
        "astId": 6420,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "mouthMap",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(MouthInfo)5154_storage)"
      },
      {
        "astId": 6424,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "tokenIdMinted",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 6426,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "useVRF",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 6445,
        "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(EyesInfo)5138_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Defs.EyesInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(EyesInfo)5138_storage"
      },
      "t_mapping(t_uint256,t_struct(HeadInfo)5131_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Defs.HeadInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(HeadInfo)5131_storage"
      },
      "t_mapping(t_uint256,t_struct(MouthInfo)5154_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Defs.MouthInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MouthInfo)5154_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EyeInfo)5147_storage": {
        "encoding": "inplace",
        "label": "struct Defs.EyeInfo",
        "members": [
          {
            "astId": 5140,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "rx",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5142,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "ry",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5144,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "cx",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5146,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "cy",
            "offset": 6,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(EyesInfo)5138_storage": {
        "encoding": "inplace",
        "label": "struct Defs.EyesInfo",
        "members": [
          {
            "astId": 5134,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "left",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(EyeInfo)5147_storage"
          },
          {
            "astId": 5137,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "right",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(EyeInfo)5147_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(HeadInfo)5131_storage": {
        "encoding": "inplace",
        "label": "struct Defs.HeadInfo",
        "members": [
          {
            "astId": 5128,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "color",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes_storage"
          },
          {
            "astId": 5130,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "shape",
            "offset": 0,
            "slot": "1",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MouthInfo)5154_storage": {
        "encoding": "inplace",
        "label": "struct Defs.MouthInfo",
        "members": [
          {
            "astId": 5149,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5151,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "width",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 5153,
            "contract": "contracts/SvgEmojiNFT.sol:SvgEmojiNFT",
            "label": "rotation",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}